/**
 * MailActions.js
 */
 'use strict';

var debug = require('debug')('UH:MailActions');
var jsonp = require('jsonp');
var subUtils = require('td-utils/lib/utils/sub');
var LoadUser = require('touchdown-v2/actions/loadUser');
var UserStore = require('touchdown-v2/stores/UserStore');
var UHCrumbsStore = require('../stores/UHCrumbsStore');
var loadUHCrumbs = require('./UHCrumbsActions').initializeUHCrumbs;

/**
 * Generate the request ID for mail services
 * @return String Unique ID
 */
var ymreqid = function () {
    var d = new Date().getTime();
    var r = null;
    var uuid = 'xxxxxxxx-xxxx-xxxx-09xx-xxxxxxxxxx00'.replace(/x/g, function(c) {
        r = (d + Math.random() * 16) % 16 | 0;
        d = Math.floor(d / 16);
        return r.toString(16);
    });
    return uuid;
};

var makeMailCountJsonpCall = function (context, params, crumb, done) { 
    var uri = params.url || 'https://mg.mail.yahoo.com/mailservices/v1/newmailcount?appid=UnivHeader&wssid=';
    var timeout = params.timeout || 3000;
    var prefix = params.prefix || '__uhmc__';
    var mailcount;
    var url = subUtils(uri + crumb) + '&ymreqid:' + ymreqid();
    // make the JSONP request to fetch the mail count
    jsonp(url, { 
            'timeout': timeout, // timeout in seconds
            'prefix': prefix    // prefix for callback
        }, function(err, data) {
            if (data && data.newmailcount) {
                debug('data is: ' + data.newmailcount);
                mailcount = data.newmailcount;
                if (context) {
                    // dispatch the action and data to the store
                    context.dispatch('NEW_MAIL_COUNT', mailcount);
                }
            }
        }
    );
    done && done();
};


/**
 * Get new mail count for authenticated users
 * @method getMailCount
 */    
var getMailCount = function(context, params, done) {
    debug('getMailCount');
    var store = context.getStore(UserStore);
    var crumbsStore = context.getStore(UHCrumbsStore);
    var crumb = crumbsStore.getMailCountCrumb();

    // initialize user store for authentication
    if (!store.isLoaded()) {
        context.executeAction(LoadUser, {}, function() {
            context.executeAction(getMailCount, {}, done);
        });
        return;
    }
    
    // return if the user is signed out
    if (store.isSignedOut()) {
        debug('getMailCount: user is signed out');
        return done && done();
    }

    if (!crumb) {
        context.executeAction(loadUHCrumbs, {}, function() {
            crumb = crumbsStore.getMailCountCrumb();
            if (crumb) {
                makeMailCountJsonpCall(context, params, crumb, done);
            } else {
                done && done();
            }
        });
    } else {
        makeMailCountJsonpCall(context, params, crumb, done);
    }
};
var makeMailPreviewJsonpCall = function (context, params, crumb, done) { 
    var uri = params.url;
    var timeout = params.timeout || 3000;
    var prefix = params.prefix || '__uhmp__';
    var url = subUtils(uri + crumb) + '&ymreqid:' + ymreqid();
    jsonp(url, {
            'timeout': timeout, // timeout in seconds
            'prefix': prefix    // prefix for callback
        }, function(err, data) {
            if (data && context) {
                if (data.error) {
                    context.dispatch('OPEN_MAILPREVIEW_FAILURE');
                } else if (data.query && data.query.results && data.query.results.result) {
                    context.dispatch('OPEN_MAILPREVIEW_SUCCESS', data.query.results.result);
                } else if (data.query && data.query.count === 0) {
                    context.dispatch('OPEN_MAILPREVIEW_NO_NEW');
                }
            }
        }
    );
    done && done();
};
/**
 * Get mail items for preview
 * @method getMailPreview
 */    
var getMailPreview = function(context, params, done) {
    var store = context.getStore(UserStore);
    var crumbsStore = context.getStore(UHCrumbsStore);
    var crumb = crumbsStore.getUcsCrumb();

    // initialize user store for authentication
    if (!store.isLoaded()) {
        context.executeAction(LoadUser, {}, function() {
            context.executeAction(getMailPreview, {}, done);
        });
        return;
    }

    // return if the user is not signed in
    if (store.isSignedOut() || store.isRecognized()) {
        debug('getMailPreview: user is signed out or in recognized state');
        return done && done();
    } 

    if (!crumb) {
        context.executeAction(loadUHCrumbs, {}, function() {
            crumb = crumbsStore.getUcsCrumb();
            if (crumb) {
                makeMailPreviewJsonpCall(context, params, crumb, done);
            } else {
                done && done();
            }
        });
    } else {
        makeMailPreviewJsonpCall(context, params, crumb, done);
    }
};

module.exports = {
    getMailCount: getMailCount,
    getMailPreview: getMailPreview
};
