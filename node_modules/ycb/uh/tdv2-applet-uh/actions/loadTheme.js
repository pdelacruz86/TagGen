'use strict';

var debug = require('debug')('uh:actions:loadTheme');
var Immutable = require('immutable');

// stores
var ThemeStore = require('../stores/ThemeStore');

function getSite(context) {
    var routeStore = context.getStore('RouteStore');
    var route = routeStore.getCurrentRoute();
    var site = null;

    // Get the 'site' data based on the following orders.

    // 1. params.contentSite
    if (route) {
        site = route.getIn(['params', 'contentSite']);
    }

    // 2. contentSite
    if (route && !site) {
        site = route.get('contentSite');
    }

    // 3. default
    if (!site) {
        site = context.session.dimensions.site;
    }

    return site;
}

function getTheme(payload) {
    var props = payload && payload.componentProps || {};
    var conf = props.componentConfig || {};

    return conf.getIn(['uh', 'ui', 'theme'], false);
}

function isEnabled(payload) {
    var props = payload && payload.componentProps || {};
    var conf = props.componentConfig || {};

    return conf.getIn(['uh', 'data', 'action', 'load_theme', 'cache', 'enabled'], false);
}

/**
 * Load theme data for a header
 * @param {Object} context Request context
 * @param {Object} payload Metadata passed in by component
 * @param {Function} done Callback function
 */
module.exports = function loadTheme(context, payload, done) {
    debug('Loading theme');

    var params = Immutable.fromJS(
        {
            site: getSite(context),
            theme: getTheme(payload)
        }
    );

    var cachedData = context.getStore(ThemeStore).getCachedData(params);

    if (!isEnabled(payload) || cachedData.size === 0) {
        // Get data from service
        debug('Get data from service');

        context.service.read('theme', params.toJS(), {}, function (err, data) {
            if (err) {
                debug('err', err);

                context.dispatch('THEME_FAILURE', err);
                return done && done(err, null);
            }

            debug('data', data);

            data.params = params;

            context.dispatch('THEME_SUCCESS', data);

            return done && done(null, data);
        });
    }
    else {
        // Get data from cache
        debug('Get data from cache');
        debug('data', cachedData);

        return done && done(null, {
            data: cachedData.toJS(),
            message: 'ok',
            statusCode: 200,
            params: params
        });
    }
};
