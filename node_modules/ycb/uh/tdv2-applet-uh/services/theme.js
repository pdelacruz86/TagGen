'use strict';

var debug = require('debug')('uh:services:theme');

var api = require('td-api');
var createService = api.base.service;
var objectAssign = require('object-assign');
var path = require('path');
var fumble = require('fumble');
var Immutable = require('immutable');

module.exports = createService({
    /**
     * Service name
     * @property name
     * @type {String}
     * @required
     */
    name: 'theme',

    ycb: {
        configPath: path.resolve(__dirname, 'theme', 'configs', 'config.js'),
        dimensionsPath: path.resolve(__dirname, 'theme', 'configs', 'dimensions.js')
    },

    format: function(data) {
        return {
            statusCode: 200,
            message: 'ok',
            data: data
        };
    },

    /**
     * Get data from resource
     * @method read
     * @param {Object} req Request object
     * @param {String} resource The resource name
     * @param {Object} params Options for the resource
     * @param {Object} [config] Per request configuration
     * @param {Function} callback
     * @async
     */
    read: function(req, resource, params, config, callback) {
        debug('read', 'req.context', req.context);
        debug('read', 'params', params);
        debug('read', 'config', config);

        var errors = [];

        if (!params.site) {
            errors.push('Missing required parameter: site');
        }
        if (!params.theme) {
            errors.push('Missing required parameter: theme');
        }
        if (errors.length > 0) {
            callback(fumble.http.internalServerError(JSON.stringify(errors)), null);
            return;
        }

        var context = objectAssign({}, req.context, {
            site: params.site,
            theme: params.theme
        });

        debug('read', 'context', context);

        this.ycb.read(this.name, 'config', context, function processConfig(err, data) {
            if (err) {
                return callback(err, null);
            }

            data = Immutable.fromJS(data);

            return callback(null, this.format(data), {
                headers: { 'Cache-Control': 'public, max-age=900, stale-while-revalidate=300' }
            });
        }.bind(this));
    }
});
