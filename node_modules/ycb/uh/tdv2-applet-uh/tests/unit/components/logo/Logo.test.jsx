/*global global, require, before, after, beforeEach, describe, it */
/*jshint -W030, -W097 */
var _require = require('root-require');
var expect = require('chai').expect;
var jsx = require('jsx-test').jsxTranspile(process.env.JENKINS_MOCHA_COVERAGE);
var MockContext = require('touchdown-v2/utils/MockComponentContext');
var mockery = require('mockery');
var HeaderStore = _require('stores/HeaderStore');

describe('components/logo/Logo.jsx', function () {
    this.timeout(4000);
    var Logo;

    before(function () {
        mockery.registerMock(
            'react-intl',
            _require('tests/mock/react-intl')
        );
        mockery.enable({
            useCleanCache: true,
            warnOnUnregistered: false
        });

        Logo = _require('components/logo/Logo.jsx');
    });

    after(function () {
        mockery.disable();
        mockery.deregisterAll();
    });

    describe('#component', function () {
        var component;

        beforeEach(function () {
            var context = MockContext({stores: [HeaderStore]});
            context.conf = _require('tests/mock/config');
            context.session = _require('tests/mock/session').toJS();
            context.theme = _require('tests/mock/theme');
            component = jsx.withContext(Logo, context);
        });

        it('should have displayName "Logo:withContext"', function () {
            expect(component).to.be.ok;
            expect(component.displayName).to.be.equal('Logo:withContext');
        });

        describe('#render', function () {
            var domNode;
            var renderedComponent;

            beforeEach(function () {
                renderedComponent = jsx.renderComponent(component);
                domNode = renderedComponent.getDOMNode();
            });

            it('should render correctly', function () {
                expect(renderedComponent).to.be.ok;

                expect(domNode.nodeName).to.be.equal('DIV');
                expect(domNode.querySelector('#uh-logo')).to.be.ok;
                expect(domNode.querySelector('#uh-logo').nodeName).to.be.equal('A');
            });

            it('should have link http://www.yahoo.com', function () {
                expect(domNode.querySelector('#uh-logo').href).to.equals('http://www.yahoo.com/');
            });
        });
    });

    describe('#component lang=zh-Hant-HK', function () {
        var component;

        beforeEach(function () {
            var context = MockContext({stores: [HeaderStore]});
            context.conf = _require('tests/mock/config');
            context.session = _require('tests/mock/session')
                .mergeDeep({
                    dimensions: {
                        intl: 'hk',
                        lang: 'zh-Hant-HK',
                        region: 'HK'
                    }
                }).toJS();
            context.theme = _require('tests/mock/theme');
            component = jsx.withContext(Logo, context);
        });

        describe('#render', function () {
            var domNode;
            var renderedComponent;

            beforeEach(function () {
                renderedComponent = jsx.renderComponent(component);
                domNode = renderedComponent.getDOMNode();
            });

            it('should have link http://hk.yahoo.com', function () {
                expect(domNode.querySelector('#uh-logo').href).to.equals('http://hk.yahoo.com/');
            });
        });
    });

    describe('#component intl=e1', function () {
        var component;

        beforeEach(function () {
            var context = MockContext({stores: [HeaderStore]});
            context.conf = _require('tests/mock/config');
            context.session = _require('tests/mock/session')
                .mergeDeep({
                    dimensions: {
                        intl: 'e1',
                        lang: 'es-US',
                        region: 'US'
                    }
                }).toJS();
            context.theme = _require('tests/mock/theme');
            component = jsx.withContext(Logo, context);
        });

        describe('#render', function () {
            var domNode;
            var renderedComponent;

            beforeEach(function () {
                renderedComponent = jsx.renderComponent(component);
                domNode = renderedComponent.getDOMNode();
            });

            it('should have link http://espanol.yahoo.com', function () {
                expect(domNode.querySelector('#uh-logo').href).to.equals('http://espanol.yahoo.com/');
            });
        });
    });

    describe('#component site=sports', function () {
        var component;

        beforeEach(function () {
            var context = MockContext({stores: [HeaderStore]});
            context.conf = _require('tests/mock/config')
                 .mergeDeep({
                    logo: {
                        property: {
                            content_1: 'Bgpx(0) Bgr(nr) Cur(p) D(b) H(35px)',
                            content_2: 'Bgz(702px) Mx(a)! W(92px)'
                        },
                        style: {
                            template: 'property'
                        },
                        link: 'https://sports.yahoo.com/'
                    }
                });
            context.session = _require('tests/mock/session')
                .mergeDeep({
                    dimensions: {
                        site: 'sports'
                    }
                }).toJS();
            context.theme = _require('tests/mock/theme');
            component = jsx.withContext(Logo, context);
        });

        describe('#render', function () {
            var domNode;
            var renderedComponent;

            beforeEach(function () {
                renderedComponent = jsx.renderComponent(component);
                domNode = renderedComponent.getDOMNode();
            });

            it('should have link https://sports.yahoo.com/', function () {
                expect(domNode.querySelector('#uh-logo').href).to.equals('https://sports.yahoo.com/');
            });
        });
    });

    describe('#component lang=zh-Hant-TW site=sports', function () {
        var component;

        beforeEach(function () {
            var context = MockContext({stores: [HeaderStore]});
            context.conf = _require('tests/mock/config')
                 .mergeDeep({
                    logo: {
                        style: {
                            country_property: {
                                content_1: 'Bgpx(0) Bgr(nr) Cur(p) D(b) H(35px)',
                                content_2: 'Bgz(702px) Mx(a)! W(155px)'
                            },
                            template: 'country_property'
                        },
                        link: 'https://tw.sports.yahoo.com/'
                    }
                });
            context.session = _require('tests/mock/session')
                .mergeDeep({
                    dimensions: {
                        intl: 'tw',
                        lang: 'zh-Hant-TW',
                        region: 'TW',
                        site: 'sports'
                    }
                }).toJS();
            context.theme = _require('tests/mock/theme');
            component = jsx.withContext(Logo, context);
        });

        describe('#render', function () {
            var domNode;
            var renderedComponent;

            beforeEach(function () {
                renderedComponent = jsx.renderComponent(component);
                domNode = renderedComponent.getDOMNode();
            });

            it('should have link https://tw.sports.yahoo.com/', function () {
                expect(domNode.querySelector('#uh-logo').href).to.equals('https://tw.sports.yahoo.com/');
            });
        });
    });

    describe('#component partner=att', function () {
        var component;

        beforeEach(function () {
            var context = MockContext({stores: [HeaderStore]});
            context.conf = _require('tests/mock/config')
                 .mergeDeep({
                    logo: {
                        style: {
                            cobrand: {
                                partner: {
                                    content_1: 'Cur(p) D(ib) H(31px) Pos(a)',
                                    content_2: 'W(95px)'
                                },
                                image_1x: 'https://s.yimg.com/rz/d/att_en-US_f_pw_351x40.png',
                                image_2x: 'https://s.yimg.com/rz/d/att_en-US_f_pw_351x40_2x.png',
                                wrapper_2: 'Bgz(702px) H(27px) W(170px) Bgpx(0) Bgpy(0)',
                                yahoo: {
                                    content_1: 'Cur(p) D(ib) H(31px) Pos(a) W(75px)',
                                    content_2: 'Mstart(95px)!'
                                }
                            },
                            container: {
                                wrapper_2: 'Miw(190px) Py(4px) UHMR1D_Pb(0px)'
                            },
                            template: 'cobrand'
                        },
                        partnerLink: 'http://att.net/'
                    }
                });
            context.session = _require('tests/mock/session')
                .mergeDeep({
                    dimensions: {
                        partner: 'att'
                    }
                }).toJS();
            context.theme = _require('tests/mock/theme');
            component = jsx.withContext(Logo, context);
        });

        describe('#render', function () {
            var domNode;
            var renderedComponent;

            beforeEach(function () {
                renderedComponent = jsx.renderComponent(component);
                domNode = renderedComponent.getDOMNode();
            });

            it('should have link http://att.net on both logo', function () {
                expect(domNode.querySelector('#partner-logo').href).to.equals('http://att.net/');
                expect(domNode.querySelector('#uh-logo').href).to.equals('http://www.yahoo.com/');
            });
        });
    });
});
