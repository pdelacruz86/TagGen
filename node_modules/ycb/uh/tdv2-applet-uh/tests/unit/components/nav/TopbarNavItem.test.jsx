/*global global, require, before, after, beforeEach, describe, it */
/*jshint -W030, -W097 */
var _require = require('root-require');
var expect = require('chai').expect;
var Immutable = require('immutable');
var jsx = require('jsx-test').jsxTranspile(process.env.JENKINS_MOCHA_COVERAGE);
var MockContext = require('touchdown-v2/utils/MockComponentContext');
var mockery = require('mockery');

describe('components/nav/TopbarNavItem.jsx', function () {
    var TopbarNavItem;

    before(function () {
        mockery.registerMock(
           'react-intl',
            _require('tests/mock/react-intl')
        );
        mockery.registerMock(
            'touchdown-v2/components/NavLink',
            _require('tests/mock/NavLink')
        );
        mockery.enable({
            useCleanCache: true,
            warnOnUnregistered: false
        });

        TopbarNavItem = _require('components/nav/TopbarNavItem.jsx');
    });

    after(function () {
        mockery.disable();
        mockery.deregisterAll();
    });

    describe('#component', function () {
        var component;
        var data;
        var methods;

        before(function () {
            methods = {
                getClassNameLinkHomeIconHomeStyle: function() {},
                getClassNameLinkHomeContent: function() {},
                getClassNameLinkHomeWrapper: function() {}
            };
        });

        beforeEach(function () {
            var context = MockContext({});
            context.conf = _require('tests/mock/config');
            context.theme = _require('tests/mock/theme');

            component = jsx.withContext(TopbarNavItem, context);
        });

        it('should have displayName "TopbarNavItem:withContext"', function () {
            expect(component).to.be.ok;
            expect(component.displayName).to.be.equal('TopbarNavItem:withContext');
        });

        describe('#render', function () {

            describe('#icon', function () {
                before(function () {
                    data = Immutable.fromJS({
                        group: 'main',
                        index: 0,
                        icon: {
                            name: 'home',
                            size: '16'
                        },
                        item: {
                            follow: true,
                            id: 'home',
                            link: 'https://yahoo.com',
                            order: 1,
                            parent: 'root',
                            title: 'Home'
                        }
                    });
                });

                var renderedComponent;
                var domNode;

                beforeEach(function () {
                    renderedComponent = jsx.renderComponent(component, {data: data, methods: methods});
                    domNode = renderedComponent.getDOMNode();
                });

                it('should render correctly', function () {
                    expect(renderedComponent).to.be.ok;
                    expect(domNode.nodeName).to.be.equal('LI');
                    expect(domNode.id).to.be.equal('uh-tb-home');
                });
            });

            describe('#no icon', function () {
                before(function () {
                    data = Immutable.fromJS({
                        group: 'main',
                        index: 0,
                        item: {
                            follow: true,
                            id: 'news',
                            link: 'https://news.yahoo.com',
                            order: 2,
                            parent: 'root',
                            title: 'News'
                        }
                    });
                });

                var renderedComponent;
                var domNode;

                beforeEach(function () {
                    renderedComponent = jsx.renderComponent(component, {data: data, methods: methods});
                    domNode = renderedComponent.getDOMNode();
                });

                it('should render correctly', function () {
                    expect(renderedComponent).to.be.ok;
                    expect(domNode.nodeName).to.be.equal('LI');
                    expect(domNode.id).to.be.equal('uh-tb-news');
                });
            });
        });
    });
});
