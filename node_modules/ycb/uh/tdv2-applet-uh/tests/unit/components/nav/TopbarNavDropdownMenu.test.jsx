/*global global, require, before, after, beforeEach, describe, it */
/*jshint -W030, -W097 */
var _require = require('root-require');
var expect = require('chai').expect;
var Immutable = require('immutable');
var jsx = require('jsx-test').jsxTranspile(process.env.JENKINS_MOCHA_COVERAGE);
var MockContext = require('touchdown-v2/utils/MockComponentContext');
var mockery = require('mockery');

describe('components/nav/TopbarNavDropdownMenu.jsx', function () {
    var TopbarNavDropdownMenu;

    before(function () {
        mockery.registerMock(
            './TopbarNavItem',
            _require('tests/mock/components/nav/TopbarNavItem.jsx')
        );
        mockery.registerMock(
           'react-intl',
            _require('tests/mock/react-intl')
        );
        mockery.enable({
            useCleanCache: true,
            warnOnUnregistered: false
        });

        TopbarNavDropdownMenu = _require('components/nav/TopbarNavDropdownMenu.jsx');
    });

    after(function () {
        mockery.disable();
        mockery.deregisterAll();
    });

    describe('#component', function () {
        var component;
        var data;

        before(function () {
            data = Immutable.fromJS({
                group: 'home',
                items: [
                    {
                        follow: true,
                        id: 'home',
                        link: 'https://att.yahoo.com',
                        order: 1,
                        parent: 'home',
                        title: 'AT&T'
                    },
                    {
                        follow: true,
                        id: 'home_attcom',
                        link: 'https://att.com',
                        order: 2,
                        parent: 'home',
                        title: 'att.com'
                    }
                ]
            });
        });

        beforeEach(function () {
            var context = MockContext({});
            context.conf = _require('tests/mock/config');
            context.session = _require('tests/mock/session').toJS();
            context.theme = _require('tests/mock/theme');

            component = jsx.withContext(TopbarNavDropdownMenu, context);
        });

        it('should have displayName "TopbarNavDropdownMenu:withContext"', function () {
            expect(component).to.be.ok;
            expect(component.displayName).to.be.equal('TopbarNavDropdownMenu:withContext');
        });

        describe('#render', function () {
            var renderedComponent;
            var domNode;

            beforeEach(function () {
                renderedComponent = jsx.renderComponent(component, {data: data});
                domNode = renderedComponent.getDOMNode();
            });

            it('should render correctly', function () {
                expect(renderedComponent).to.be.ok;
                expect(domNode.nodeName).to.be.equal('DIV');
                expect(domNode.id).to.be.equal('uh-tb-home-menu');
            });
        });
    });
});
