/*global global, require, before, after, beforeEach, describe, it */
/*jshint -W030, -W097 */
var _require = require('root-require');
var expect = require('chai').expect;
var Immutable = require('immutable');
var jsx = require('jsx-test').jsxTranspile(process.env.JENKINS_MOCHA_COVERAGE);
var MockContext = require('touchdown-v2/utils/MockComponentContext');
var mockery = require('mockery');

describe('components/nav/TopbarItems.jsx', function () {
    var TopbarItems;

    before(function () {
        mockery.registerMock(
           'react-intl',
            _require('tests/mock/react-intl')
        );
        mockery.registerMock(
            './TopbarNavDropdownItem',
            _require('tests/mock/components/nav/TopbarNavDropdownItem.jsx')
        );
        mockery.registerMock(
            './TopbarNavItem',
            _require('tests/mock/components/nav/TopbarNavItem.jsx')
        );
        mockery.enable({
            useCleanCache: false,
            warnOnUnregistered: false
        });
        TopbarItems = _require('components/nav/TopbarItems.jsx');
    });

    after(function () {
        mockery.disable();
        mockery.deregisterAll();
    });

    describe('#component without More', function () {
        var component;
        var dataset;
        var data;
        var methods;

        before(function () {
            dataset = Immutable.fromJS(
                {
                    home: [
                        {
                            follow: true,
                            id: 'AT&T',
                            link: 'https://att.com',
                            order: 1,
                            parent: 'home',
                            title: 'AT&T'
                        }
                    ],
                    more: [
                        {
                            follow: true,
                            id: 'flickr',
                            link: 'https://www.flickr.com',
                            order: 5,
                            parent: 'root',
                            title: 'Flickr'
                        }
                    ],
                    main: [
                        {
                            follow: true,
                            id: 'home',
                            link: 'https://www.yahoo.com',
                            order: 1,
                            parent: 'root',
                            title: 'Home'
                        },
                        {
                            follow: true,
                            id: 'mail',
                            link: 'https://mail.yahoo.com',
                            order: 2,
                            parent: 'root',
                            title: 'Mail'
                        },
                        {
                            follow: true,
                            id: 'news',
                            link: 'https://news.yahoo.com',
                            order: 3,
                            parent: 'root',
                            title: 'News'
                        },
                        {
                            follow: false,
                            id: 'more',
                            link: 'https://everything.yahoo.com',
                            order: 4,
                            parent: 'root',
                            title: 'More'
                        }
                    ]
                }
            );
            methods = {
                getClassNameLinkHomeIconHomeStyle: function() {},
                getClassNameLinkHomeContent: function() {},
                getClassNameLinkHomeWrapper: function() {}
            };
        });

        beforeEach(function () {
            var context = MockContext({});
            context.conf = _require('tests/mock/config');
            context.session = _require('tests/mock/session').toJS();
            context.theme = _require('tests/mock/theme');

            component = jsx.withContext(TopbarItems, context);
        });

        it('should have displayName "TopbarItems:withContext"', function () {
            expect(component).to.be.ok;
            expect(component.displayName).to.be.equal('TopbarItems:withContext');
        });

        describe('#render', function () {
            var renderedComponent;
            var domNode;

            describe('main.size = 0, home.size = 0, more.size = 0', function () {
                before(function () {
                    data = dataset;
                    data = data.set('home', Immutable.fromJS([]));
                    data = data.set('main', Immutable.fromJS([]));
                    data = data.set('more', Immutable.fromJS([]));
                });

                beforeEach(function () {
                    renderedComponent = jsx.renderComponent(component, {data: data, methods: methods});
                    domNode = renderedComponent.getDOMNode();
                });

                it('should render correctly', function () {
                    expect(renderedComponent).to.be.ok;
                    expect(domNode.id).to.equals('masterNav');
                    expect(domNode.querySelector('#eyebrow')).to.be.ok;
                });
            });

            describe('main.size > 0, home.size = 0, more.size = 0', function () {
                before(function () {
                    data = dataset;
                    data = data.set('home', Immutable.fromJS([]));
                    data = data.set('more', Immutable.fromJS([]));
                });

                beforeEach(function () {
                    renderedComponent = jsx.renderComponent(component, {data: data, methods: methods});
                    domNode = renderedComponent.getDOMNode();
                });

                it('should render correctly', function () {
                    expect(renderedComponent).to.be.ok;
                    expect(domNode.id).to.equals('masterNav');
                    expect(domNode.querySelector('#eyebrow')).to.be.ok;
                });
            });

            describe('main.size > 0, home.size = 0, more.size > 0', function () {
                before(function () {
                    data = dataset;
                    data = data.set('home', Immutable.fromJS([]));
                });

                beforeEach(function () {
                    renderedComponent = jsx.renderComponent(component, {data: data, methods: methods});
                    domNode = renderedComponent.getDOMNode();
                });

                it('should render correctly', function () {
                    expect(renderedComponent).to.be.ok;
                    expect(domNode.id).to.equals('masterNav');
                    expect(domNode.querySelector('#eyebrow')).to.be.ok;
                });
            });

            describe('main.size > 0, home.size > 0, more.size > 0', function () {
                before(function () {
                    data = dataset;
                });

                beforeEach(function () {
                    renderedComponent = jsx.renderComponent(component, {data: data, methods: methods});
                    domNode = renderedComponent.getDOMNode();
                });

                it('should render correctly', function () {
                    expect(renderedComponent).to.be.ok;
                    expect(domNode.id).to.equals('masterNav');
                    expect(domNode.querySelector('#eyebrow')).to.be.ok;
                });
            });
        });
    });
});
