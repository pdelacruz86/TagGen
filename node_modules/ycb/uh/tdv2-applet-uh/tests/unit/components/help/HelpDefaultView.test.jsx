/*global global, require, before, after, beforeEach, describe, it */
/*jshint -W030, -W097 */
var _require = require('root-require');
var expect = require('chai').expect;
var Immutable = require('immutable');
var jsx = require('jsx-test').jsxTranspile(process.env.JENKINS_MOCHA_COVERAGE);
var MockContext = require('touchdown-v2/utils/MockComponentContext');
var mockery = require('mockery');

describe.skip('components/help/HelpDefaultView.jsx', function () {
    var HelpDefaultView;

    before(function () {
        mockery.registerMock(
            'react-icons',
            _require('tests/mock/react-icons')
        );
        mockery.registerMock(
            'react-intl',
            _require('tests/mock/react-intl')
        );
        mockery.enable({
            useCleanCache: true,
            warnOnUnregistered: false
        });

        HelpDefaultView = _require('components/help/HelpDefaultView.jsx');
    });

    after(function () {
        mockery.disable();
        mockery.deregisterAll();
    });

    describe('#component', function () {
        var component;

        beforeEach(function () {
            var context = MockContext({stores: []});
            context.conf = _require('tests/mock/config');
            context.session = _require('tests/mock/session').toJS();
            context.theme = _require('tests/mock/theme');
            component = jsx.withContext(HelpDefaultView, context);
        });

        it('should have displayName "HelpDefaultView:withContext"', function () {
            expect(component).to.be.ok;
            expect(component.displayName).to.be.equal('HelpDefaultView:withContext');
        });

        describe('#render', function () {
            var domNode;
            var renderedComponent;

            beforeEach(function () {
                renderedComponent = jsx.renderComponent(component, {
                    data: Immutable.Map()
                });
                domNode = renderedComponent.getDOMNode();
            });

            it('should render correctly', function () {
                expect(renderedComponent).to.be.ok;

                expect(domNode.nodeName).to.be.equal('LI');
                // expect(domNode.querySelector('#uh-setting')).to.be.ok;
                // expect(domNode.querySelector('#uh-setting').nodeName).to.be.equal('A');
            });
        });
    });
});
