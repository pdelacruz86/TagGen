/*global global, require, before, after, beforeEach, describe, it */
/*jshint -W030, -W097 */
var _require = require('root-require');
var expect = require('chai').expect;
var Immutable = require('immutable');
var jsx = require('jsx-test').jsxTranspile(process.env.JENKINS_MOCHA_COVERAGE);
var mockery = require('mockery');
var url = require('url');

describe('components/profile/SignedOutProfile.jsx', function () {
    var SignedOutProfile;

    before(function () {
        mockery.registerMock(
            'react-intl',
            _require('tests/mock/react-intl')
        );
        mockery.enable({
            useCleanCache: true,
            warnOnUnregistered: false
        });

        SignedOutProfile = _require('components/profile/SignedOutProfile.jsx');
    });

    after(function () {
        mockery.disable();
        mockery.deregisterAll();
    });

    describe('#component', function () {
        var component;
        var data;

        before(function () {
            data = Immutable.fromJS({
                alias: '',
                first_name: '',
                guid: '',
                image: null,
                page_url: 'http://localhost:3000/console?ctrl=Header',
                site: 'all',
                state: 'signed_out',
                yid: ''
            });
        });

        beforeEach(function () {
            var context = {
                conf: _require('tests/mock/config'),
                session: _require('tests/mock/session').toJS(),
                theme: _require('tests/mock/theme')
            };
            component = jsx.withContext(SignedOutProfile, context);
        });

        it('should have displayName "SignedOutProfile:withContext"', function () {
            expect(component).to.be.ok;
            expect(component.displayName).to.be.equal('SignedOutProfile:withContext');
        });

        describe('#render', function () {
            var domNode;
            var renderedComponent;

            beforeEach(function () {
                renderedComponent = jsx.renderComponent(component, {data: data});
                domNode = renderedComponent.getDOMNode();
            });

            it('should render correctly', function () {
                expect(renderedComponent).to.be.ok;

                expect(domNode.nodeName).to.be.equal('LI');
                expect(domNode.querySelector('#uh-signedin')).to.be.ok;
                expect(domNode.querySelector('#uh-signedin').nodeName).to.be.equal('A');
            });

            it('should have link https://login.yahoo.com/config/login?.intl=us&.lang=en-US&.src=all&.done=...', function () {
                var expected = url.format({
                    protocol: 'https',
                    hostname: 'login.yahoo.com',
                    pathname: 'config/login',
                    query: {
                        '.intl': 'us',
                        '.lang': 'en-US',
                        '.src': 'all',
                        '.done': url.format({
                            protocol: 'http',
                            hostname: 'localhost',
                            port: 3000,
                            pathname: 'console',
                            query: {
                                ctrl: 'Header'
                            }
                        })
                    }
                });
                var actualURLObj = url.parse(domNode.querySelector('#uh-signedin').href, true);
                var expectURLObj = url.parse(expected, true);
                expect(actualURLObj.host).to.equal(expectURLObj.host);
                expect(actualURLObj.query).to.deep.equal(expectURLObj.query);
            });
        });
    });

    describe('#component lang=zh-Hant-HK', function () {
        var component;
        var data;

        before(function () {
            data = Immutable.fromJS({
                alias: '',
                first_name: '',
                guid: '',
                image: null,
                page_url: 'http://hk.yahoo.com/',
                site: undefined,
                state: 'signed_out',
                yid: ''
            });
        });

        beforeEach(function () {
            var conf = _require('tests/mock/config');
            var session = _require('tests/mock/session')
                .mergeDeep({
                    dimensions: {
                        site: 'omg',
                        intl: 'hk',
                        lang: 'zh-Hant-HK',
                        region: 'HK'
                    }
                });
            var theme = _require('tests/mock/theme');
            var context = {
                conf: conf,
                session: session.toJS(),
                theme: theme
            };
            component = jsx.withContext(SignedOutProfile, context);
        });

        describe('#render', function () {
            var domNode;
            var renderedComponent;

            beforeEach(function () {
                renderedComponent = jsx.renderComponent(component, {data: data});
                domNode = renderedComponent.getDOMNode();
            });

            it('should have link https://login.yahoo.com/config/login?.intl=hk&.lang=zh-Hant-HK&.src=all&.done=...', function () {
                var expected = url.format({
                    protocol: 'https',
                    hostname: 'login.yahoo.com',
                    pathname: 'config/login',
                    query: {
                        '.intl': 'hk',
                        '.lang': 'zh-Hant-HK',
                        '.src': 'omg',
                        '.done': url.format({
                            protocol: 'http',
                            hostname: 'hk.yahoo.com',
                            pathname: '/'
                        })
                    }
                });
                var actualURLObj = url.parse(domNode.querySelector('#uh-signedin').href, true);
                var expectURLObj = url.parse(expected, true);
                expect(actualURLObj.host).to.equal(expectURLObj.host);
                expect(actualURLObj.query).to.deep.equal(expectURLObj.query);
            });
        });
    });
});
