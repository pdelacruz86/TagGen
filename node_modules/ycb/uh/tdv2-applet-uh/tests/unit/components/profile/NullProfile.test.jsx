/*global global, require, before, after, beforeEach, describe, it */
/*jshint -W030, -W097 */
var _require = require('root-require');
var expect = require('chai').expect;
var jsx = require('jsx-test').jsxTranspile(process.env.JENKINS_MOCHA_COVERAGE);
var mockery = require('mockery');

describe('components/profile/NullProfile.jsx', function () {
    var NullProfile;

    before(function () {
        mockery.registerMock(
            'react-icons',
            _require('tests/mock/react-icons.jsx')
        );
        mockery.registerMock(
            'react-intl',
            _require('tests/mock/react-intl')
        );
        mockery.enable({
            useCleanCache: true,
            warnOnUnregistered: false
        });

        NullProfile = _require('components/profile/NullProfile.jsx');
    });

    after(function () {
        mockery.disable();
        mockery.deregisterAll();
    });

    describe('#component', function () {
        var component;

        beforeEach(function () {
            var context = {
                conf: _require('tests/mock/config'),
                session: _require('tests/mock/session').toJS(),
                theme: _require('tests/mock/theme')
            };
            component = jsx.withContext(NullProfile, context);
        });

        it('should have displayName "NullProfile:withContext"', function () {
            expect(component).to.be.ok;
            expect(component.displayName).to.be.equal('NullProfile:withContext');
        });

        describe('#render', function () {
            var domNode;
            var renderedComponent;

            beforeEach(function () {
                renderedComponent = jsx.renderComponent(component);
                domNode = renderedComponent.getDOMNode();
            });

            it('should render correctly', function () {
                expect(renderedComponent).to.be.ok;

                expect(domNode.nodeName).to.be.equal('LI');
                expect(domNode.className).to.have.string('V(h)');

                expect(domNode.querySelector('.icon').getAttribute('data-name')).to.be.ok;
                expect(domNode.querySelector('.icon').getAttribute('data-height')).to.be.ok;
                expect(domNode.querySelector('.icon').getAttribute('data-width')).to.be.ok;
                expect(domNode.querySelector('.icon').getAttribute('data-color')).to.be.ok;
            });

            it('should have icon name "profile"', function () {
                expect(domNode.querySelector('.icon').getAttribute('data-name')).to.equal('profile');
            });

            it('should have icon size "34x34"', function () {
                expect(domNode.querySelector('.icon').getAttribute('data-height')).to.equal('34');
                expect(domNode.querySelector('.icon').getAttribute('data-width')).to.equal('34');
            });
        });
    });
});
