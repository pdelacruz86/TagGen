// TODO: gonna replace by mocha test.
//
// /* global describe, beforeEach, it, jest, expect */
// var React;
// var SearchForm;
// var TestUtils;
// var SearchInputStore;
// var MockComponentContext;
// var mockContext;
//
// var Immutable = require.requireActual('immutable');
// var config = Immutable.fromJS({
//     search: {
//         autofocus: true,
//         autocomplete: {
//             enabled: true,
//             jsonp: {
//                 prefix: 'yasearch'
//             },
//             searchQueryKey: 'command',
//             searchResult: ['r'],
//             url: {
//                 protocol: 'https',
//                 host: 'search.yahoo.com',
//                 path: '/sugg/gossip/gossip-us-fp/',
//                 query: {
//                     nresults: 10,
//                     output: 'yjsonp'
//                 }
//             }
//         },
//         queries: {
//             'fr': 'yfp-t-'
//         },
//         action: 'dummyAction',
//         instantSearch: false,
//         searchHint: false,
//         cancelBtn: false,
//         clearBtn: false,
//         termCompleteBtn: false,
//         useAutocompleteBoxComp: false
//     }
// });
// var session = {
//     dimensions: {
//         authed: '0',
//         bucket: '',
//         colo: 'gq1',
//         device: 'desktop',
//         environment: 'dev',
//         intl: 'us',
//         lang: 'en-US',
//         partner: 'none',
//         region: 'US',
//         site: 'all',
//         spdy: '0',
//         ssl: '0',
//         tz: 'America/Los_Angeles',
//         ynet: '1'
//     }
// };
//
// jest.autoMockOff();
// jest.setMock('react-intl', {
//     getIntlMessage: function (key) {
//         return key;
//     }
// });
//
// describe('Search desktop', function() {
//     var renderedSearchForm;
//     var searchFormElement;
//
//     beforeEach(function() {
//         React = require('react/addons');
//         TestUtils = React.addons.TestUtils;
//         SearchForm = require('../../../../components/search/SearchForm.jsx');
//         MockComponentContext = require('touchdown-v2/utils/MockComponentContext');
//         SearchInputStore = require('tdv2-applet-search-input/stores/SearchInputStore');
//         mockContext = MockComponentContext({stores: [ SearchInputStore ]});
//         var MySearchForm = React.createClass({
//             childContextTypes: {
//                 conf: React.PropTypes.object,
//                 getStore: React.PropTypes.func,
//                 session: React.PropTypes.object
//             },
//             getChildContext: function() {
//                 return {
//                     conf: config,
//                     getStore: this.props.context.getStore,
//                     session: session
//                 };
//             },
//             render: function() {
//                 return React.createElement(SearchForm, this.props);
//             }
//         });
//
//         searchFormElement = React.createElement(MySearchForm, {
//             context: mockContext
//         });
//
//         renderedSearchForm = TestUtils.renderIntoDocument(searchFormElement);
//         renderedSearchForm = TestUtils.findRenderedComponentWithType(renderedSearchForm, SearchForm);
//     });
//
//
//     it('#render', function() {
//         // var node = TestUtils.scryRenderedDOMComponentsWithClass(renderedSearchForm, 'uh-search');
//         // expect(node.length).toEqual(1);
//     });
//
//     it('Renders Search query', function() {
//         var fr = config.get('search').toJS().queries.fr;
//
//         var frInputs = TestUtils.findAllInRenderedTree(renderedSearchForm, function (inst) {
//             return TestUtils.isDOMComponent(inst) &&
//                 inst.tagName === 'INPUT' &&
//                 inst.getDOMNode().getAttribute('name') === 'fr';
//         });
//
//         var frInputNode = frInputs && frInputs[0] && frInputs[0].getDOMNode();
//         var frInputValue = frInputNode && frInputNode.getAttribute('value');
//
//         expect(frInputValue).toEqual(fr);
//     });
//
//     it('Doesnt navigate if search hint is empty', function() {
//         renderedSearchForm.onSearchHintChanged('');
//         renderedSearchForm.submitResult();
//         // TODO: Find how to test route changes
//     });
//
//     it('should update fr on onSearchChange', function () {
//         renderedSearchForm.onSearchChange({
//             source: 'onsearchchange'
//         });
//         expect(renderedSearchForm.state.frSource).toEqual('onsearchchange');
//     });
//
//     it('should update fr on onSubmitResult', function () {
//         renderedSearchForm.onSubmitResult();
//         expect(renderedSearchForm.state.frSource).toEqual('sb');
//     });
// });
//
// describe('Search mobile', function() {
//     var renderedSearchForm;
//     var searchFormElement;
//
//     beforeEach(function() {
//         React = require('react/addons');
//         TestUtils = React.addons.TestUtils;
//
//         SearchForm = require('../../../../components/search/SearchForm.jsx');
//         MockComponentContext = require('touchdown-v2/utils/MockComponentContext');
//         SearchInputStore = require('tdv2-applet-search-input/stores/SearchInputStore');
//         mockContext = MockComponentContext({stores: [ SearchInputStore ]});
//
//         var MySearchForm = React.createClass({
//             childContextTypes: {
//                 conf: React.PropTypes.object,
//                 getStore: React.PropTypes.func,
//                 session: React.PropTypes.object
//             },
//             getChildContext: function() {
//                 return {
//                     conf: config,
//                     getStore: this.props.context.getStore,
//                     session: session
//                 };
//             },
//             render: function() {
//                 return React.createElement(SearchForm, this.props);
//             }
//         });
//
//         searchFormElement = React.createElement(MySearchForm, {
//             context: mockContext,
//             isSmartphone: true
//         });
//
//         renderedSearchForm = TestUtils.renderIntoDocument(searchFormElement);
//         renderedSearchForm = TestUtils.findRenderedComponentWithType(renderedSearchForm, SearchForm);
//     });
//
//     it('Does not show a search button for mobile', function () {
//         var searchButtons = TestUtils.findAllInRenderedTree(renderedSearchForm, function (inst) {
//             return TestUtils.isDOMComponent(inst) &&
//                 inst.tagName === 'BUTTON';
//         });
//
//         var searchButtonNode =  searchButtons && searchButtons[0] && searchButtons[0].getDOMNode();
//         var searchButtonClasses = searchButtonNode.getAttribute('class');
//
//         expect(searchButtonClasses.indexOf('D(n)').toString()).not.toEqual('-1');
//     });
//
//     it('should clear input on cancel click', function () {
//         renderedSearchForm.cancelClick({
//             preventDefault: function () {},
//             stopPropagation: function () {}
//         });
//         var input = TestUtils.findAllInRenderedTree(renderedSearchForm, function (inst) {
//             return TestUtils.isDOMComponent(inst) &&
//                 inst.tagName === 'INPUT';
//         });
//         var inputNode = input && input[0] && input[0].getDOMNode();
//
//         expect(inputNode.value).toEqual('');
//     });
//
//     it('should call sync input on componentDidUpdate', function () {
//         renderedSearchForm.componentDidUpdate();
//         // TODO : Come up with way to check width
//     });
//
//     it('should show only search form', function () {
//         renderedSearchForm.showOnlySearchForm();
//         expect(renderedSearchForm.state.showOnlySearchForm).toEqual(true);
//     });
//
//
//     it('should show full header', function () {
//         renderedSearchForm.showFullHeader();
//         expect(renderedSearchForm.state.showOnlySearchForm).toEqual(false);
//     });
//
//     it('should update input width on syncInput', function () {
//         renderedSearchForm.syncInput();
//         // TODO : Come up with way to check width
//     });
// });
