/*global after, before, describe, it */
'use strict';

var commonDimensions = require('common-dimensions');
var ConfigHelper = require('ycb-config');
var expect = require('chai').expect;
var fs = require('fs');
var pkg = require('../../../../package.json');
var util = require('util');
var yaml = require('js-yaml');
var ycb = require('../../../../configs/componentHeader');

describe('configs/componentHeader.js', function () {
    before(function() {
        this.bundleName = pkg.name;
        this.configHelper = new ConfigHelper();
        this.configHelper.addConfigContents(this.bundleName, 'dimensions', 'dimensions', commonDimensions);
        this.configHelper.addConfigContents(this.bundleName, 'config', 'config', ycb);
    });

    after(function() {
        this.bundleName = undefined;
        this.configHelper = undefined;
    });

    it('should be an Array', function () {
        expect(ycb).to.be.an('Array');
    });

    describe('logo', function () {
        describe('cobrand', function () {
            // single run with parameter { partner: 'att' }.
            describe('.single', function() {
                it ('{ partner: \'att\' }', function (done) {
                    this.configHelper.read(this.bundleName, 'config', {partner: 'att', lang: 'en-US'},
                    function getConfig(err, config) {
                        var result = {
                            style: {
                                cobrand: {
                                    partner: {},
                                    yahoo: {}
                                },
                                container: {
                                    inline: {}
                                },
                                country_property: {},
                                property: {},
                                yahoo: {}
                            },
                            isCobrand: true,
                            logoBgSize: 'Bgz(702px)',
                            partnerLink: 'http://att.net/',
                            logoLeftWidth: 'W(95px)',
                            logoRightWidth: 'W(75px)',
                            logoMarginLeft: 'Mstart(95px)!',
                            height: 'H(31px)',
                            width: 'W(170px)',
                            backgroundColor: null,
                            backgroundPosition: 'DarkTheme_Bgp(partnerLogoPos)!',
                            defaultNonRetinaImage:
                                'https://s.yimg.com/rz/d/att_en-US_f_pw_351x40.png',
                            defaultRetinaImage:
                                'https://s.yimg.com/rz/d/att_en-US_f_pw_351x40_2x.png',
                            nonRetinaImage: 'https://s.yimg.com/rz/l/yahoo_en-US_f_pw_125x32.png',
                            image: 'https://s.yimg.com/rz/l/yahoo_en-US_f_pw_125x32_2x.png',
                            backgroundPosX: 'Bgpx(0)',
                            backgroundPosY: 'Bgpy(0)'
                        };
                        var actual = config.uh.logo;
                        expect(result).to.deep.equal(actual);
                        done();
                    });
                });
            });

            // parametric run with external data provider 'logo-cobrand.yaml'.
            describe('.parametric', function() {
                var data = yaml.safeLoad( fs.readFileSync('tests/data/logo-cobrand.yaml', 'utf8') );
                Object.keys(data).forEach(function getData(key) {
                    // Formulate the context object.
                    //
                    // input:
                    //      'lang:zh-Hant-HK'
                    //
                    // output:
                    //      {
                    //          lang: 'zh-Hant-HK'
                    //      }
                    //
                    var context = (function getContext(key) {
                        var data = {};
                        var kvps = key.split(',');
                        kvps.forEach(function processKV(kvs) {
                            var kv = kvs.split(':');
                            data[kv[0]] = kv[1];
                        });
                        return data;
                    }(key));

                    // Get the config given a context object.
                    it(util.inspect(context, {depth: null}), function (done) {
                        this.configHelper.read(this.bundleName, 'config', context, function getConfig(err, config) {
                            var result = data[key];
                            var actual = config.uh.logo;
                            expect(result).to.deep.equal(actual);
                            done();
                        });
                    });
                });
            });
        });
    });
});
