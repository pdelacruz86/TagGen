/*global after, before, describe, it */
'use strict';
var rootRequire = require('root-require');
var testRequire = rootRequire('tests/lib/testRequire');

var commonDimensions = require('common-dimensions');
var ConfigHelper = require('ycb-config');
var expect = require('chai').expect;
var fs = require('fs');
var pkg = rootRequire('package.json');
var util = require('util');
var yaml = require('js-yaml');
var ycb = testRequire('configs/componentHeader');

describe('configs/componentHeader.js', function () {
    before(function() {
        this.bundleName = pkg.name;
        this.configHelper = new ConfigHelper();
        this.configHelper.addConfigContents(this.bundleName, 'dimensions', 'dimensions', commonDimensions);
        this.configHelper.addConfigContents(this.bundleName, 'config', 'config', ycb);
    });

    after(function() {
        this.bundleName = undefined;
        this.configHelper = undefined;
    });

    it('should be an Array', function () {
        expect(ycb).to.be.an('Array');
    });

    describe('Profile', function () {
        describe('standard', function () {
            // single run with parameter { lang: 'en-US' }.
            describe('.single', function() {
                it ('{ lang: \'en-US\' }', function (done) {
                    this.configHelper.read(this.bundleName, 'config', {lang: 'en-US'},
                    function getConfig(err, config) {
                        var result = {
                            style: {
                                account_info: {},
                                avatar: {},
                                container: {},
                                panel: {},
                                button: {
                                    inline: {}
                                },
                                signed_out: {}
                            },
                            data: {
                                icon: {
                                    profile: {
                                        name: 'profile',
                                        size: 34
                                    }
                                }
                            },
                            avatarSize: '36px',
                            mode: 'server',
                            loginBaseUrl: 'https://login.yahoo.com/config/login',
                            settingUrl: 'https://edit.yahoo.com/config/eval_profile',
                            signoutUrl: 'https://login.yahoo.com/config/login?logout=1&.direct=2&' +
                                '.done=https://www.yahoo.com',
                            urls: {
                                account_info: {
                                    hostname: 'edit.yahoo.com',
                                    pathname: '/config/eval_profile',
                                    protocol: 'https',
                                    query: {}
                                },
                                signed_in: {
                                    hostname: 'login.yahoo.com',
                                    pathname: '/config/login',
                                    protocol: 'https',
                                    query: {}
                                },
                                signed_out: {
                                    hostname: 'login.yahoo.com',
                                    pathname: '/config/login',
                                    protocol: 'https',
                                    query: {
                                        '.direct': 2,
                                        logout: 1
                                    }
                                }
                            }
                        };
                        var actual = config.uh.profile;
                        expect(result).to.deep.equal(actual);
                        done();
                    });
                });
            });

            // parametric run with external data provider 'logo-cobrand.yaml'.
            describe('.parametric', function() {
                var data = yaml.safeLoad( fs.readFileSync('tests/data/profile-config.yaml', 'utf8') );
                Object.keys(data).forEach(function getData(key) {
                    // Formulate the context object.
                    //
                    // input:
                    //      'lang:zh-Hant-HK'
                    //
                    // output:
                    //      {
                    //          lang: 'zh-Hant-HK'
                    //      }
                    //
                    var context = (function getContext(key) {
                        var data = {};
                        var kvps = key.split(',');
                        kvps.forEach(function processKV(kvs) {
                            var kv = kvs.split(':');
                            data[kv[0]] = kv[1];
                        });
                        return data;
                    }(key));

                    // Get the config given a context object.
                    it(util.inspect(context, {depth: null}), function (done) {
                        this.configHelper.read(this.bundleName, 'config', context, function getConfig(err, config) {
                            var result = data[key];
                            var actual = config.uh.profile;
                            expect(result).to.deep.equal(actual);
                            done();
                        });
                    });
                });
            });
        });
    });
});
