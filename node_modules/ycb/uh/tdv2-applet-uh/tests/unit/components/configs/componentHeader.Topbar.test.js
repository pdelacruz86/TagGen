/*global after, before, describe, it */
'use strict';
var rootRequire = require('root-require');
var testRequire = rootRequire('tests/lib/testRequire');

var commonDimensions = require('common-dimensions');
var ConfigHelper = require('ycb-config');
var expect = require('chai').expect;
var fs = require('fs');
var pkg = rootRequire('package.json');
var util = require('util');
var yaml = require('js-yaml');
var ycb = testRequire('configs/componentHeader');

describe('configs/componentHeader.js', function () {
    before(function() {
        this.bundleName = pkg.name;
        this.configHelper = new ConfigHelper();
        this.configHelper.addConfigContents(this.bundleName, 'dimensions', 'dimensions', commonDimensions);
        this.configHelper.addConfigContents(this.bundleName, 'config', 'config', ycb);
    });

    after(function() {
        this.bundleName = undefined;
        this.configHelper = undefined;
    });

    it('should be an Array', function () {
        expect(ycb).to.be.an('Array');
    });

    describe('topbar', function () {
        describe('en-US', function () {
            // single run with parameter { lang: 'en-US' }.
            describe('.single', function() {
                it('{ lang: \'en-US\' }', function (done) {
                    this.configHelper.read(this.bundleName, 'config', {lang: 'en-US'},
                    function getConfig(err, config) {
                        var result = {
                            style: {
                                nav_home: {
                                    inline: {},
                                    link: {}
                                },
                                nav_main: {
                                    link: {},
                                    link_home: {
                                        icon: {
                                            down_arrow: {
                                                inline: {}
                                            },
                                            home: {
                                                inline: {}
                                            }
                                        }
                                    },
                                    link_more: {
                                        icon: {
                                            down_arrow: {
                                                inline: {}
                                            }
                                        }
                                    }
                                },
                                nav_more: {
                                    inline: {},
                                    link: {}
                                }
                            },
                            data: {
                                force_absolute: {
                                    answers: false,
                                    finance: false,
                                    games: false,
                                    groups: false,
                                    home: false,
                                    mail: false,
                                    mobile: false,
                                    screen: false,
                                    search: false,
                                    shopping: false,
                                    sports: false,
                                    weather: false
                                },
                                force_absolute_all: true,
                                more: 12,
                                more_item: {
                                    link: 'https://everything.yahoo.com',
                                    title: 'More'
                                },
                                icon: {
                                    home: {
                                        name: 'home',
                                        size: 16
                                    },
                                    down_arrow: {
                                        name: 'CoreArrowDown',
                                        size: 8
                                    }
                                }
                            }
                        };
                        var actual = config.uh.topbar;
                        expect(result).to.deep.equal(actual);
                        done();
                    });
                });
            });

            // parametric run with external data provider 'topbar-config.yaml'.
            describe('.parametric', function() {
                var data = yaml.safeLoad( fs.readFileSync('tests/data/topbar-config.yaml', 'utf8') );
                Object.keys(data).forEach(function getData(key) {
                    // Formulate the context object.
                    //
                    // input:
                    //      'lang:en-US'
                    //
                    // output:
                    //      {
                    //          lang: 'en-US'
                    //      }
                    //
                    var context = (function getContext(key) {
                        var data = {};
                        var kvps = key.split(',');
                        kvps.forEach(function processKV(kvs) {
                            var kv = kvs.split(':');
                            data[kv[0]] = kv[1];
                        });
                        return data;
                    }(key));

                    // Get the config given a context object.
                    it(util.inspect(context, {depth: null}), function (done) {
                        this.configHelper.read(this.bundleName, 'config', context, function getConfig(err, config) {
                            var result = data[key];
                            var actual = config.uh.topbar;
                            expect(result).to.deep.equal(actual);
                            done();
                        });
                    });
                });
            });
        });
    });
});
