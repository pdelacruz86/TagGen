/*global require, describe, it */
/*jshint -W030, -W097 */
var _require = require('root-require');
var expect = require('chai').expect;
var fumble = require('fumble');
var Immutable = require('immutable');
var MockContext = require('touchdown-v2/utils/MockActionContext');

var loadNavAction = _require('actions/loadNav');

describe('actions/loadNav.js', function () {
    describe('#action', function () {
        describe('#ok', function () {
            var context;
            var payload;

            it ('should be true', function() {
                payload = {};
                payload.componentProps = {};
                payload.componentProps.componentConfig = {};
                payload.componentProps.componentConfig = Immutable.fromJS({
                    uh: _require('tests/mock/config').toJS()
                });

                context = MockContext();
                context.session = _require('tests/mock/session').toJS();

                context.service.setService('nav',
                    function (method, params, config, callback) {
                        callback(null, _require('tests/fixtures/nav').read.nav);
                    });

                context.executeAction(loadNavAction, payload, function (err, data) {
                    expect(err).to.be.null;
                    expect(data).to.be.deep.equal(_require('tests/fixtures/nav').read.nav);
                });
            });
        });

        describe('#error', function () {
            var context;
            var payload;

            it ('should be true', function() {
                payload = {};
                payload.componentProps = {};
                payload.componentProps.componentConfig = {};
                payload.componentProps.componentConfig = Immutable.fromJS({
                    uh: _require('tests/mock/config').toJS()
                });

                context = MockContext();
                context.session = _require('tests/mock/session').toJS();

                context.service.setService('nav',
                    function (method, params, config, callback) {
                        callback(fumble.http.internalServerError('Internal Server Error'), null);
                    });

                context.executeAction(loadNavAction, payload, function (err, data) {
                    expect(err).to.be.deep.equal(fumble.http.internalServerError('Internal Server Error'));
                    expect(data).to.be.null;
                });
            });
        });
    });
});
