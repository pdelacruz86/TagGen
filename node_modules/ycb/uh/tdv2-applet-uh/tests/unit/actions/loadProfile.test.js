/*global require, before, describe, it */
/*jshint -W030, -W097 */
var _require = require('root-require');
var expect = require('chai').expect;
var MockContext = require('touchdown-v2/utils/MockActionContext');

var ProfileStore = require('tdv2-service-profile/stores/ProfileStore');
var UserStore = require('touchdown-v2/stores/UserStore');
var loadProfileAction = _require('actions/loadProfile');

describe('actions/loadProfile.js', function () {
    describe('#action', function () {
        var context;
        var stores;

        describe('#client', function () {
            before(function () {
                context = MockContext({stores: [ProfileStore, UserStore]});

                context.service.setService('ProfileService.profile',
                    function (method, params, config, callback) {
                        callback(null, _require('tests/fixtures/profile').read.profile);
                    });
                context.service.setService('user',
                    function (method, params, config, callback) {
                        callback(null, _require('tests/fixtures/profile').read.user);
                    });

                stores = {
                    profile: context.getStore(ProfileStore),
                    user: context.getStore(UserStore)
                };

                context.session = _require('tests/mock/session');
            });

            it('should execute "ProfileActions.getProfile" action', function process() {
                expect(stores.profile.isLoaded()).to.be.false;

                context.executeAction(loadProfileAction, {mode: 'client'}, function () {
                    expect(stores.profile.isLoaded()).to.be.true;
                    expect(stores.profile.dehydrate().guid)
                        .to.be.equal(_require('tests/fixtures/profile').read.profile.profile.guid);
                });
            });
        });

        describe('#server', function () {
            describe('isLightWeightBrowser = true', function () {
                before(function () {
                    context = MockContext({stores: [ProfileStore, UserStore]});

                    context.service.setService('ProfileService.profile',
                        function (method, params, config, callback) {
                            callback(null, _require('tests/fixtures/profile').read.profile);
                        });
                    context.service.setService('user',
                        function (method, params, config, callback) {
                            callback(null, _require('tests/fixtures/profile').read.user);
                        });

                    stores = {
                        profile: context.getStore(ProfileStore),
                        user: context.getStore(UserStore)
                    };

                    context.session = _require('tests/mock/session')
                        .mergeDeep({
                            isLightWeightBrowser: true
                        })
                        .toJS();

                    expect(context.session.isLightWeightBrowser).to.be.true;
                });

                it('should execute "ProfileActions.getProfile" action', function process() {
                    expect(stores.profile.isLoaded()).to.be.false;

                    context.executeAction(loadProfileAction, {mode: 'server'}, function () {
                        expect(stores.profile.isLoaded()).to.be.true;
                        expect(stores.profile.dehydrate().guid)
                            .to.be.equal(_require('tests/fixtures/profile').read.profile.profile.guid);
                    });
                });
            });

            describe('isLightWeightBrowser = false', function () {
                before(function () {
                    context = MockContext({stores: [ProfileStore, UserStore]});

                    context.service.setService('ProfileService.profile',
                        function (method, params, config, callback) {
                            callback(null, _require('tests/fixtures/profile').read.profile);
                        });
                    context.service.setService('user',
                        function (method, params, config, callback) {
                            callback(null, _require('tests/fixtures/profile').read.user);
                        });

                    stores = {
                        profile: context.getStore(ProfileStore),
                        user: context.getStore(UserStore)
                    };

                    context.session = _require('tests/mock/session')
                        .mergeDeep({
                            isLightWeightBrowser: false
                        })
                        .toJS();

                    expect(context.session.isLightWeightBrowser).to.be.false;
                });

                it('should execute "ProfileActions.getProfile" action', function process() {
                    expect(stores.profile.isLoaded()).to.be.false;

                    context.executeAction(loadProfileAction, {mode: 'server'}, function () {
                        expect(stores.profile.isLoaded()).to.be.false;
                    });
                });
            });
        });
    });
});
