/*global require, describe, it, beforeEach */
/*jshint -W030, -W097 */
var _require = require('root-require');
var expect = require('chai').expect;
var fumble = require('fumble');
var Immutable = require('immutable');
var MockContext = require('touchdown-v2/utils/MockActionContext');
var RouteStore = require('fluxible-router/lib/RouteStore');
var ThemeStore = require('../../../stores/ThemeStore');
var CountStore = require('../../mock/stores/CountStore');
var sinon = require('sinon');

var loadThemeAction = _require('actions/loadTheme');

describe('actions/loadTheme.js', function () {
    describe('#action', function () {
        describe('#cache.enabled=true', function() {
            describe('#ok', function () {
                var context;
                var payload;

                beforeEach(function () {
                    context = MockContext({stores: [RouteStore, ThemeStore, CountStore]});
                    sinon.stub(context.getStore(ThemeStore), 'getContext').returns({
                        session: {
                            dimensions: {
                                site: 'all',
                                theme: 'default'
                            }
                        }
                    });

                    context.session = _require('tests/mock/session').toJS();

                    context.service.setService('theme',
                        function (method, params, config, callback) {
                            callback(null, _require('tests/fixtures/theme').read.theme);
                        });

                    context.getStore(CountStore).resetData();
                });

                it ('should be true', function() {
                    payload = {};
                    payload.componentProps = {};
                    payload.componentProps.componentConfig = {};
                    payload.componentProps.componentConfig = Immutable.fromJS({
                        uh: _require('tests/mock/config').toJS()
                    });

                    expect(context.getStore(CountStore).getData()).to.deep.equal({
                        'THEME_FAILURE': 0,
                        'THEME_SUCCESS': 0
                    });

                    // execute action
                    context.executeAction(loadThemeAction, payload, function (err, data) {
                        expect(err).to.be.null;
                        expect(data).to.be.deep.equal(_require('tests/fixtures/theme').read.theme);
                        expect(context.getStore(CountStore).getData()).to.deep.equal({
                            'THEME_FAILURE': 0,
                            'THEME_SUCCESS': 1
                        });
                    });

                    // execute action again!
                    context.executeAction(loadThemeAction, payload, function (err, data) {
                        expect(err).to.be.null;
                        expect(data).to.be.deep.equal(_require('tests/fixtures/theme').read.theme);
                        expect(context.getStore(CountStore).getData()).to.deep.equal({
                            'THEME_FAILURE': 0,
                            'THEME_SUCCESS': 1
                        });
                    });
                });
            });

            describe('#error', function () {
                var context;
                var payload;

                beforeEach(function () {
                    context = MockContext({stores: [RouteStore, ThemeStore, CountStore]});
                    sinon.stub(context.getStore(ThemeStore), 'getContext').returns({
                        session: {
                            dimensions: {
                                site: 'all',
                                theme: 'default'
                            }
                        }
                    });

                    context.session = _require('tests/mock/session').toJS();

                    context.service.setService('theme',
                        function (method, params, config, callback) {
                            callback(fumble.http.internalServerError('Internal Server Error'), null);
                        });

                    context.getStore(CountStore).resetData();
                });

                it ('should be true', function() {
                    payload = {};
                    payload.componentProps = {};
                    payload.componentProps.componentConfig = {};
                    payload.componentProps.componentConfig = Immutable.fromJS({
                        uh: _require('tests/mock/config').toJS()
                    });

                    // execute action
                    context.executeAction(loadThemeAction, payload, function (err, data) {
                        expect(err).to.be.deep.equal(fumble.http.internalServerError('Internal Server Error'));
                        expect(data).to.be.null;
                        expect(context.getStore(CountStore).getData()).to.deep.equal({
                            'THEME_FAILURE': 1,
                            'THEME_SUCCESS': 0
                        });
                    });

                    // execute action again!
                    context.executeAction(loadThemeAction, payload, function (err, data) {
                        expect(err).to.be.deep.equal(fumble.http.internalServerError('Internal Server Error'));
                        expect(data).to.be.null;
                        expect(context.getStore(CountStore).getData()).to.deep.equal({
                            'THEME_FAILURE': 2,
                            'THEME_SUCCESS': 0
                        });
                    });
                });
            });
        });

        describe('#cache.enabled=false', function() {
            describe('#ok', function () {
                var context;
                var payload;

                beforeEach(function () {
                    context = MockContext({stores: [RouteStore, ThemeStore, CountStore]});
                    sinon.stub(context.getStore(ThemeStore), 'getContext').returns({
                        session: {
                            dimensions: {
                                site: 'all',
                                theme: 'default'
                            }
                        }
                    });

                    context.session = _require('tests/mock/session').toJS();

                    context.service.setService('theme',
                        function (method, params, config, callback) {
                            callback(null, _require('tests/fixtures/theme').read.theme);
                        });

                    context.getStore(CountStore).resetData();
                });

                it ('should be true', function() {
                    payload = {};
                    payload.componentProps = {};
                    payload.componentProps.componentConfig = {};
                    payload.componentProps.componentConfig = Immutable.fromJS({
                        uh: _require('tests/mock/config').mergeDeep({
                            data: {
                                action: {
                                    load_theme: {
                                        cache: {
                                            enabled: false
                                        }
                                    }
                                }
                            }
                        }).toJS()
                    });

                    expect(context.getStore(CountStore).getData()).to.deep.equal({
                        'THEME_FAILURE': 0,
                        'THEME_SUCCESS': 0
                    });

                    // execute action
                    context.executeAction(loadThemeAction, payload, function (err, data) {
                        expect(err).to.be.null;
                        expect(data).to.be.deep.equal(_require('tests/fixtures/theme').read.theme);
                        expect(context.getStore(CountStore).getData()).to.deep.equal({
                            'THEME_FAILURE': 0,
                            'THEME_SUCCESS': 1
                        });
                    });

                    // execute action again!
                    context.executeAction(loadThemeAction, payload, function (err, data) {
                        expect(err).to.be.null;
                        expect(data).to.be.deep.equal(_require('tests/fixtures/theme').read.theme);
                        expect(context.getStore(CountStore).getData()).to.deep.equal({
                            'THEME_FAILURE': 0,
                            'THEME_SUCCESS': 2
                        });
                    });
                });
            });

            describe('#error', function () {
                var context;
                var payload;

                beforeEach(function () {
                    context = MockContext({stores: [RouteStore, ThemeStore, CountStore]});
                    sinon.stub(context.getStore(ThemeStore), 'getContext').returns({
                        session: {
                            dimensions: {
                                site: 'all',
                                theme: 'default'
                            }
                        }
                    });

                    context.session = _require('tests/mock/session').toJS();

                    context.service.setService('theme',
                        function (method, params, config, callback) {
                            callback(fumble.http.internalServerError('Internal Server Error'), null);
                        });

                    context.getStore(CountStore).resetData();
                });

                it ('should be true', function() {
                    payload = {};
                    payload.componentProps = {};
                    payload.componentProps.componentConfig = {};
                    payload.componentProps.componentConfig = Immutable.fromJS({
                        uh: _require('tests/mock/config').mergeDeep({
                            data: {
                                action: {
                                    load_theme: {
                                        cache: {
                                            enabled: false
                                        }
                                    }
                                }
                            }
                        }).toJS()
                    });

                    // execute action
                    context.executeAction(loadThemeAction, payload, function (err, data) {
                        expect(err).to.be.deep.equal(fumble.http.internalServerError('Internal Server Error'));
                        expect(data).to.be.null;
                        expect(context.getStore(CountStore).getData()).to.deep.equal({
                            'THEME_FAILURE': 1,
                            'THEME_SUCCESS': 0
                        });
                    });

                    // execute action again!
                    context.executeAction(loadThemeAction, payload, function (err, data) {
                        expect(err).to.be.deep.equal(fumble.http.internalServerError('Internal Server Error'));
                        expect(data).to.be.null;
                        expect(context.getStore(CountStore).getData()).to.deep.equal({
                            'THEME_FAILURE': 2,
                            'THEME_SUCCESS': 0
                        });
                    });
                });
            });
        });
    });
});
