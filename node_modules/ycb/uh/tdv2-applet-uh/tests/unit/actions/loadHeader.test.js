/*global require, before, after, describe, it */
/*jshint -W030, -W097 */
var _require = require('root-require');
var expect = require('chai').expect;
var Immutable = require('immutable');
var MockContext = require('touchdown-v2/utils/MockActionContext');
var mockery = require('mockery');
var RouteStore = require('fluxible-router/lib/RouteStore');

var loadHeaderAction = _require('actions/loadHeader');

describe('actions/loadHeader.js', function () {
    before(function () {
        mockery.registerMock(
            '../actions/loadNav',
            _require('tests/mock/actions/loadNav')
        );
        mockery.registerMock(
            '../actions/loadProfile',
            _require('tests/mock/actions/loadProfile')
        );
        mockery.registerMock(
            '../actions/loadTheme',
            _require('tests/mock/actions/loadTheme')
        );
        mockery.enable({
            useCleanCache: true,
            warnOnUnregistered: false
        });
    });

    after(function () {
        mockery.disable();
        mockery.deregisterAll();
    });

    describe('#action', function () {
        describe('#ok', function () {
            var context;
            var payload;

            it ('should be true', function() {
                context = MockContext({stores: [RouteStore]});
                payload = Immutable.fromJS({
                    action: 'loadHeader'
                });

                context.executeAction(loadHeaderAction, payload, function (err, data) {
                    expect(err).to.be.null;
                    expect(payload.toJS()).to.be.deep.equals(data.payload.toJS());
                });
            });
        });

        describe('#error', function () {
            var context;
            var payload;

            it ('LOAD_NAV_FAILURE', function(done) {
                context = MockContext({stores: [RouteStore]});
                payload = Immutable.fromJS({
                    action: 'loadHeader',
                    err: {
                        loadNav: 'LOAD_NAV_FAILURE'
                    }
                });

                context.executeAction(loadHeaderAction, payload, function (err, data) {
                    expect(data).to.be.null;
                    expect(err.loadNav).not.to.be.null;
                    done();
                });
            });

            it ('LOAD_PROFILE_FAILURE', function(done) {
                context = MockContext({stores: [RouteStore]});
                payload = Immutable.fromJS({
                    action: 'loadHeader',
                    err: {
                        loadProfile: 'LOAD_PROFILE_FAILURE'
                    }
                });

                context.executeAction(loadHeaderAction, payload, function (err, data) {
                    expect(data).to.be.null;
                    expect(err.loadProfile).not.to.be.null;
                    done();
                });
            });

            it ('LOAD_THEME_FAILURE', function(done) {
                context = MockContext({stores: [RouteStore]});
                payload = Immutable.fromJS({
                    action: 'loadHeader',
                    err: {
                        loadTheme: 'LOAD_THEME_FAILURE'
                    }
                });

                context.executeAction(loadHeaderAction, payload, function (err, data) {
                    expect(data).to.be.null;
                    expect(err.loadTheme).not.to.be.null;
                    done();
                });
            });
        });
    });
});
