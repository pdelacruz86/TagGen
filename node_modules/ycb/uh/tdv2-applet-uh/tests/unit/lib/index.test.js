/*global require, before, after, describe, it, window:true */
/*jshint -W030, -W097 */
var _require = require('root-require');
var expect = require('chai').expect;
var React = require('react/addons');

describe('lib/index.js', function () {
    var lib;

    before(function () {
        lib = _require('lib/');
    });

    describe('#getStaticMethod', function() {
        var Component;
        before(function () {
            Component = React.createClass({displayName: "Component",
                statics: {
                    className: {
                        style: {
                            nav_main: {
                                wrapper: '_getClassNameWrapper'
                            }
                        }
                    },
                    node: {
                        nav_home: '_getNodeNavHome'
                    }
                },
                render: function() {
                    return null;
                }
            });
        });

        it('#array', function() {
            var actual = lib.getStaticMethod(Component, 'className', ['style', 'nav_main', 'wrapper']);
            var expected = '_getClassNameWrapper';
            expect(actual).to.be.equal(expected);
        });

        it('#string', function() {
            var actual = lib.getStaticMethod(Component, 'node', 'nav_home');
            var expected = '_getNodeNavHome';
            expect(actual).to.be.equal(expected);
        });

        it('#undefined', function() {
            var actual = lib.getStaticMethod(Component, 'node', undefined);
            var expected = null;
            expect(actual).to.be.equal(expected);
        });
    });

    describe('#lightWeightBackground', function () {
        var lang;
        var region;
        var site;
        var theme;

        describe('#site', function () {
            before(function () {
                lang = 'en-US';
                region = 'US',
                theme = 'default';
            });

            it('site=\'\'', function () {
                site = '';
                var actual = lib.lightWeightBackground(site, lang, region, theme);
                expect(actual).to.be.equal('');
            });

            it('site=\'news\'', function () {
                site = 'news';
                var actual = lib.lightWeightBackground(site, lang, region, theme);
                expect(actual).to.be.equal('');
            });
        });

        describe('#theme', function () {
            before(function () {
                lang = 'en-US';
                region = 'US',
                theme = 'dark';
            });

            it('theme=\'dark\'', function () {
                site = '';
                var actual = lib.lightWeightBackground(site, lang, region, theme);
                var expected = [
                    '#atomic ' + site + '.' + region + '.' + lang + ' .Bgc\\(\\$bg-header\\)',
                    '{background-color:#000\\9 !important;}',
                    '#atomic ' + site + '.' + region + '.' + lang + ' .Bgc\\(\\$bg-header\\):hover',
                    '#atomic ' + site + '.' + region + '.' + lang + ' .Bgc\\(\\$bg-header\\):hover b',
                    '#atomic ' + site + '.' + region + '.' + lang + ' .Bgc\\(\\$bg-header\\) b:hover',
                    '{background-color:#fff\\9 !important; color:#000\\9 !important;}'
                ].join(' ');
                expect(actual).to.be.equal(expected);
            });
        });
    });

    describe('#lightWeightLogo', function() {
        var id = '#UH';
        var template;

        it('template=\'\'', function () {
            template = '';
            var actual = lib.lightWeightLogo(id, template);
            var expected = '';
            expect(actual).to.be.equal(expected);
        });

        it('template=\'property\'', function () {
            template = 'property';
            var actual = lib.lightWeightLogo(id, template);
            var expected = [
                '#atomic.ie-7 ' + id + ' {*display:inline; margin-left:49px!important; zoom:1;}',
                '#atomic.ie-8 ' + id + ' {position:relative;}'
            ].join(' ');
            expect(actual).to.be.equal(expected);
        });
    });

    describe('#mediaBackgroundImage', function() {
        var id = '#UH';
        var image1x = 'yahoo.png';
        var image2x = 'yahoo@2x.png';

        it ('should be true', function () {
            var actual = lib.mediaBackgroundImage(id, image1x, image2x);
            var expected = [
                id + ' {background-image: url(' + image1x + ');}',
                '@media',
                    [
                        ' only screen and (-webkit-min-device-pixel-ratio: 2)',
                        ' only screen and ( min--moz-device-pixel-ratio: 2)',
                        ' only screen and ( -o-min-device-pixel-ratio: 2/1)',
                        ' only screen and ( min-device-pixel-ratio: 2)',
                        ' only screen and ( min-resolution: 192dpi)',
                        ' only screen and ( min-resolution: 2dppx)'
                    ].join(','),
                '{ ' + id + ' {background-image: url(' + image2x + ');} }'
            ].join(' ');
            expect(actual).to.be.equal(expected);
        });
    });

    describe('#isClient', function() {
        describe('#client', function() {
            before(function () {
                window = {};
            });
            after(function () {
                window = undefined;
            });
            it('should be true', function () {
                var actual = lib.isClient();
                var expected = true;
                expect(actual).to.be.equal(expected);
            });
        });

        describe('#server', function() {
            before(function () {
                window = undefined;
            });

            it('should be false', function () {
                var actual = lib.isClient();
                var expected = false;
                expect(actual).to.be.equal(expected);
            });
        });
    });

    describe('#isEnabled', function() {
        describe('#true', function() {
            it('val=\'true\'', function () {
                var actual = lib.isEnabled('true');
                var expected = true;
                expect(actual).to.be.equal(expected);
            });

            it('val=\'1\'', function () {
                var actual = lib.isEnabled('1');
                var expected = true;
                expect(actual).to.be.equal(expected);
            });
        });

        describe('#false', function() {
            it('val=\'false\'', function () {
                var actual = lib.isEnabled('false');
                var expected = false;
                expect(actual).to.be.equal(expected);
            });

            it('val=\'0\'', function () {
                var actual = lib.isEnabled('0');
                var expected = false;
                expect(actual).to.be.equal(expected);
            });
        });
    });

    describe('#strExpand', function() {
        it('s=\'Stanley\', prefix=\'Hey,\', suffix=\'!\'', function () {
            var actual = lib.strExpand('Stanley', 'Hey, ', '!');
            var expected = 'Hey, Stanley!';
            expect(actual).to.be.equal(expected);
        });
    });
    describe('#getLogoUrl', function() {
        it('should return https://www.yahoo.com when intl,protocol,site are undefined', function () {
            var actual = lib.getLogoUrl();
            var expected = 'https://www.yahoo.com';
            expect(actual).to.be.equal(expected);
        });
        it('should return https://www.yahoo.com when intl is us & protocol,site are undefined', function () {
            var intl = 'us';
            var actual = lib.getLogoUrl(intl);
            var expected = 'https://www.yahoo.com';
            expect(actual).to.be.equal(expected);
        });
        it('should return https://uk.yahoo.com when intl is uk', function () {
            var intl = 'uk';
            var actual = lib.getLogoUrl(intl);
            var expected = 'https://uk.yahoo.com';
            expect(actual).to.be.equal(expected);
        });
        it('should return https://www.yahoo.com/food when intl is us & site is food', function () {
            var intl = 'us';
            var protocol = 'https';
            var site = 'food';
            var actual = lib.getLogoUrl(intl, protocol, site);
            var expected = 'https://www.yahoo.com/food';
            expect(actual).to.be.equal(expected);
        });
        it('should return http://uk.yahoo.com/news when intl is uk & site is news', function () {
            var intl = 'uk';
            var protocol = 'http';
            var site = 'news';
            var actual = lib.getLogoUrl(intl, protocol, site);
            var expected = 'http://uk.yahoo.com/news';
            expect(actual).to.be.equal(expected);
        });
    });
    describe('#getPageUrl', function() {
        it('should return https://www.yahoo.com when navigate,host,protocol are undefined', function () {
            var actual = lib.getPageUrl();
            var expected = 'https://www.yahoo.com/';
            expect(actual).to.be.equal(expected);
        });
        it('should return navigate externalUrl when externalUrl & url are defined', function () {
            var navigate = {
                url: '/console?ctrl=Header&m_id=tdv2-applet-uh',
                method: 'GET',
                body: {},
                externalUrl: 'https://test.external.url.yahoo.com'
            };
            var actual = lib.getPageUrl(navigate);
            var expected = 'https://test.external.url.yahoo.com';
            expect(actual).to.be.equal(expected);
        });
        it('should return navigate url when externalUrl is null & url is defined', function () {
            var navigate = {
                url: '/food',
                method: 'GET',
                body: {},
                externalUrl: null
            };
            var actual = lib.getPageUrl(navigate);
            var expected = 'https://www.yahoo.com/food';
            expect(actual).to.be.equal(expected);
        });
        it('should return default url when externalUrl & url are null & host,protocol are not passed', function () {
            var navigate = {
                url: null,
                method: 'GET',
                body: {},
                externalUrl: null
            };
            var actual = lib.getPageUrl(navigate);
            var expected = 'https://www.yahoo.com';
            expect(actual).to.be.equal(expected);
        });
        it('should return sessionUrl when externalUrl & url are null & host,protocol are passed', function () {
            var navigate = {
                url: null,
                method: 'GET',
                body: {},
                externalUrl: null
            };
            var actual = lib.getPageUrl(navigate, 'session.url.yahoo.com' , 'http');
            var expected = 'http://session.url.yahoo.com';
            expect(actual).to.be.equal(expected);
        });
    });
});
