/*global require, before, beforeEach, after, describe, it */
/*jshint -W030, -W097 */
var _require = require('root-require');
var expect = require('chai').expect;
var Immutable = require('immutable');
var jsx = require('jsx-test').jsxTranspile(process.env.JENKINS_MOCHA_COVERAGE);
var mockery = require('mockery');

describe('mixins/AppletMixin.js', function () {
    var AppletMixin;

    before(function () {
        mockery.registerMock(
            'react-intl',
            _require('tests/mock/react-intl')
        );
        mockery.enable({
            useCleanCache: false,
            warnOnUnregistered: false
        });

        AppletMixin = _require('mixins/AppletMixin');
    });

    after(function () {
        mockery.disable();
        mockery.deregisterAll();
    });

    // describe.skip('#contextTypes', function () {
    //     it('should contain keys \'conf\', \'session\', \'theme\'', function () {
    //         expect(AppletMixin.contextTypes).to.include.keys('conf', 'session', 'theme');
    //     });
    // });

    describe('#mixins', function () {
        it('should include \'IntlMixin\'', function () {
            expect(AppletMixin.mixins).to.deep.include.members([_require('tests/mock/react-intl')]);
        });
    });

    describe('#component', function () {
        var component;

        beforeEach(function () {
            var context = {
                conf: _require('tests/mock/config'),
                session: _require('tests/mock/session').toJS(),
                theme: _require('tests/mock/theme')
            };
            component = jsx.withContext(_require('tests/mock/Hello.jsx'), context);
        });

        it('should have displayName "Hello:withContext"', function () {
            expect(component).to.be.ok;
            expect(component.displayName).to.be.equal('Hello:withContext');
        });

        describe('#render', function () {
            var domNode;
            var renderedComponent;

            beforeEach(function () {
                var data = Immutable.fromJS({
                    name: 'STANLEY'
                });

                renderedComponent = jsx.renderComponent(component, {
                    data: data
                });

                domNode = renderedComponent.getDOMNode();
            });

            it('should render correctly', function () {
                expect(renderedComponent).to.be.ok;

                expect(domNode.nodeName).to.be.equal('DIV');
                // console.log(domNode.innerHTML);
            });

            describe('#getClassName', function() {
                it('should return data from conf', function () {
                    expect(domNode.querySelector('#get_class_name .conf').innerHTML)
                        .to.be.equal('V(h)');
                });

                it('should return data from statics', function () {
                    expect(domNode.querySelector('#get_class_name .statics').innerHTML)
                        .to.be.equal('V(v)');
                });

                it('should return data from theme', function () {
                    expect(domNode.querySelector('#get_class_name .theme').innerHTML)
                        .to.be.equal('Bdc(uhPurple) Bgc(uhPurple):h C(uhPurple)');
                });
            });

            describe('#getConf', function() {
                it('should return data from conf', function () {
                    expect(domNode.querySelector('#get_conf .conf').innerHTML)
                        .to.be.equal('V(h)');
                });

                it('should return data from statics', function () {
                    expect(domNode.querySelector('#get_conf .statics').innerHTML)
                        .to.be.equal('V(v)');
                });
            });

            describe('#getI13n', function() {
                it('should return true', function () {
                    expect(domNode.querySelector('#get_i13n .signed_in').innerHTML)
                        .to.be.equal('{"elm":"btn","itc":"0","slk":"signin","subsec":"profile"}');
                });
                it('should return data merging with source ', function () {
                    expect(domNode.querySelector('#get_i13n .signed_out').innerHTML)
                        .to.be.equal('{"elm":"btn","itc":"1","slk":"signout","subsec":"profile","id":"stanleyn"}');
                });
            });

            describe('#getIntl', function() {
                it('should return true', function () {
                    expect(domNode.querySelector('#get_intl .hello_world').innerHTML)
                        .to.be.equal('HELLO_WORLD');
                });
            });

            describe('#getMetaData', function() {
                it('should return data from props', function () {
                    expect(domNode.querySelector('#get_meta_data .props').innerHTML)
                        .to.be.equal('STANLEY');
                });

                it('should return data from statics', function () {
                    expect(domNode.querySelector('#get_meta_data .statics').innerHTML)
                        .to.be.equal('stanleyn@yahoo-inc.com');
                });
            });

            describe('#getTheme', function() {
                it('should return data from theme', function () {
                    expect(domNode.querySelector('#get_theme .content_wrapper').innerHTML)
                        .to.be.equal('Fl(start) Mx(4px)');
                });
            });
        });
    });
});
