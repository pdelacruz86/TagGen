/*global require, beforeEach, describe, it */
/*jshint -W030, -W097 */
var _require = require('root-require');
var expect = require('chai').expect;
var fumble = require('fumble');
var Immutable = require('immutable');

var NavStore = _require('stores/NavStore');

describe('stores/NavStore.js', function () {
    describe('#store', function () {
        var store;

        beforeEach(function () {
            store = new NavStore();
        });

        describe('#initialize', function () {
            it('should return true', function () {
                expect(store.getState()).to.be.deep.equal(Immutable.fromJS({}));
                expect(store.getItems()).to.be.deep.equal(Immutable.fromJS({}));
                expect(store.getError()).to.be.deep.equal(Immutable.fromJS({}));
            });
        });

        describe('#handlers', function () {
            it('NAV_SUCCESS', function (done) {
                var payload = {
                    data: {
                        items: {
                            home: {
                                link: 'https://www.yahoo.com/',
                                order: 1,
                                title: 'Home'
                            },
                            mail: {
                                link: 'https://mail.yahoo.com/',
                                order: 2,
                                title: 'Mail'
                            }
                        }
                    }
                };
                store.on('change', function () {
                    var data = Immutable.fromJS(payload);
                    expect(store.getState()).to.be.deep.equal(data);
                    expect(store.getItems()).to.be.deep.equal(data.getIn(['data', 'items']));
                    expect(store.getError()).to.be.deep.equal(Immutable.fromJS({}));
                    done();
                });
                store._handleNavSuccess(payload);
            });

            it('NAV_FAILURE', function () {
                var error = fumble.http.internalServerError();
                store.on('change', function () {
                    expect(store.getState()).to.be.deep.equal(Immutable.fromJS({error: error}));
                    expect(store.getItems()).to.be.deep.equal(Immutable.fromJS({}));
                    expect(store.getError()).to.be.deep.equal(error);
                });
                store._handleNavFailure(error);
            });
        });
    });
});
