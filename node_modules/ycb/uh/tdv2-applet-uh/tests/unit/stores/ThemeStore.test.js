/*global require, beforeEach, describe, it */
/*jshint -W030, -W097 */
var _require = require('root-require');
var expect = require('chai').expect;
var fumble = require('fumble');
var Immutable = require('immutable');
var sinon = require('sinon');

var ThemeStore = _require('stores/ThemeStore');

describe('stores/ThemeStore.js', function () {
    describe('#store', function () {
        var store;

        describe('#context', function () {
            var store1;
            var store2;

            beforeEach(function () {
                store1 = new ThemeStore();
                sinon.stub(store1, 'getContext').returns({
                    session: {
                        dimensions: {
                            site: 'search'
                        }
                    }
                });

                store2 = new ThemeStore();
                sinon.stub(store2, 'getContext').returns({
                    session: {
                        dimensions: {
                            site: 'search',
                            // https://git.corp.yahoo.com/touchdown/common-dimensions/blob/master/dimensions.js
                            i13n: 'key does not exist in common dimensions'
                        }
                    }
                });
            });

            it('should return true', function () {
                expect(store1.getCommonDimensions()).to.be.deep.equal(store2.getCommonDimensions());
            });
        });

        describe('#initialize', function () {
            beforeEach(function () {
                store = new ThemeStore();
                sinon.stub(store, 'getContext').returns({
                    session: {
                        dimensions: {
                            site: 'all',
                            theme: 'default'
                        }
                    }
                });
            });

            it('should return true', function () {
                expect(store.getState()).to.be.deep.equal(Immutable.fromJS({}));
                expect(store.getData()).to.be.deep.equal(Immutable.fromJS({}));
                expect(store.getError()).to.be.deep.equal(Immutable.fromJS({}));
            });
        });

        describe('#handlers', function () {
            beforeEach(function () {
                store = new ThemeStore();
                sinon.stub(store, 'getContext').returns({
                    session: {
                        dimensions: {
                            site: 'all',
                            theme: 'default'
                        }
                    }
                });
            });

            it('THEME_SUCCESS', function (done) {
                var theme = 'default';
                var payload = {
                    data: Immutable.fromJS({
                        uh: {
                            style: {
                                background: 'Bgc(#f9f9f9)'
                            },
                            mail: {
                                background: 'Bgc(uhPurple)'
                            }
                        }
                    }),
                    params: Immutable.fromJS({
                        theme: theme
                    })
                };
                store.on('change', function () {
                    expect(store.getState().toJS()).to.be.deep.equal({
                        data: {
                            '882106670': payload.data.toJS()
                        }
                    });
                    expect(store.getCachedData(payload.params)).to.be.deep.equal(payload.data);
                    expect(store.getError()).to.be.deep.equal(Immutable.fromJS({}));
                    done();
                });
                store._handleThemeSuccess(payload);
            });

            it('THEME_FAILURE', function () {
                var error = fumble.http.internalServerError();
                store.on('change', function () {
                    expect(store.getState()).to.be.deep.equal(Immutable.fromJS({error: error}));
                    expect(store.getData()).to.be.deep.equal(Immutable.fromJS({}));
                    expect(store.getError()).to.be.deep.equal(error);
                });
                store._handleThemeFailure(error);
            });
        });
    });
});
