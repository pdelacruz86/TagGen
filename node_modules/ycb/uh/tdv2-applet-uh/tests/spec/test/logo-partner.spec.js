/* global browser, $, it, describe, before */

var chai = require('chai');
var chaiAsPromised = require('chai-as-promised');
var conditions = require('../lib/conditions');
var expect = chai.expect;
var locators = require('../lib/locators');
var when = require('mocha-bdd-when');

chai.use(chaiAsPromised);

describe('#check partner Logo', function () {
    before(function () {
        return browser.wait(function () {
            return browser.get('/console?ctrl=Header&m_id=tdv2-applet-uh&site=style&partner=att').then(function () {
                return true;
            });
        });
    });

    when(conditions['#base']).describe('#base', function () {
        it('should exist - co-branded logo', function () {
            var cobrandLogo = $(locators.cobrandLogo);

            browser.waitToBePresent(cobrandLogo);
            expect(cobrandLogo.isPresent()).to.eventually.equal(true, "Co-branded logo does not exist");
        });

        it('should exist - partner & property logos', function () {
            var partnerLogo = $(locators.partnerLogo);
            var logo = $(locators.Logo);

            browser.waitToBePresent(partnerLogo);
            expect(partnerLogo.isPresent()).to.eventually.equal(true, "Partner logo does not exist");
            expect(logo.isPresent()).to.eventually.equal(true, "Property logo does not exist");
        });

        it('should have href defined - partner & property logos', function () {
            var partnerLogo = $(locators.partnerLogo);
            var logo = $(locators.Logo);

            browser.waitToBePresent(partnerLogo);
            partnerLogo.getAttribute('href').then(function(hrefPartner) {
                expect(hrefPartner).to.exist; // neither null nor undefined
                expect(hrefPartner).to.not.be.empty;
            });
            logo.getAttribute('href').then(function(href) {
                expect(href).to.exist; // neither null nor undefined
                expect(href).to.not.be.empty;
            });
        });

        it('should have image as background', function () {
            var cobrandLogo = $(locators.cobrandLogo);

            browser.waitToBePresent(cobrandLogo);
            cobrandLogo.getCssValue('background-image').then(function(backgroundImage) {
                expect(backgroundImage).to.exist; // neither null nor undefined
                expect(backgroundImage).to.not.be.empty;
            });
        });
    });
});
