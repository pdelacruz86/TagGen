/* global browser, $, it, describe, before */

var chai = require('chai');
var chaiAsPromised = require('chai-as-promised');
var conditions = require('../lib/conditions');
var expect = chai.expect;
var locators = require('../lib/locators');
var when = require('mocha-bdd-when');

chai.use(chaiAsPromised);

var loginUser = function() {
    browser.signIn('ucstester@yahoo.com', 'testing');
    browser.get('/console?ctrl=Header&m_id=tdv2-applet-uh');
};

describe('#check Profile', function () {
    before(function () {
        return browser.wait(function () {
            return browser.get('/console?ctrl=Header&m_id=tdv2-applet-uh').then(function () {
                return true;
            });
        });
    });

    when(conditions['#login']).describe('#login', function () {
        before(function () {
            loginUser();
        });

        it('should exist', function () {
            var profile = $(locators.Profile);
            browser.waitToBePresent(profile);
            expect(profile.isPresent()).not.to.equal(false);
        });

        it('settings should exist', function () {
            var settings  = $(locators.Settings);
            var profile = $(locators.Profile);

            browser.waitToBePresent(profile);
            browser.hover(profile).then (function () {
                expect(settings.isPresent()).to.eventually.equal(true, "'" + settings + "' is not present");

                browser.waitToBePresent(settings);
                expect(settings.isDisplayed()).to.eventually.equal(true, "'" + settings + "' is not displayed");

                expect(settings.isEnabled()).to.eventually.equal(true, "'" + settings + "' is not enabled");
            });
        });

        it('signout should exist', function () {
            var signout  = $(locators.SignOut);
            var profile = $(locators.Profile);

            browser.waitToBePresent(profile);
            browser.hover(profile).then (function () {
                browser.waitToBePresent(signout);
                expect(signout.isPresent()).to.eventually.equal(true, "'" + signout + "' is not present");
                expect(signout.isDisplayed()).to.eventually.equal(true, "'" + signout + "' is not displayed");
                expect(signout.isEnabled()).to.eventually.equal(true, "'" + signout + "' is not enabled");
            });
        });

        it('settings link goes to edit.yahoo.com', function () {
            var profile = $(locators.Profile);
            var settings = $(locators.Settings);

            browser.waitToBePresent(profile);
            browser.hover(profile).then (function () {
                browser.waitToBePresent(settings);
                settings.getAttribute('href').then(function(url) {
                    expect(url).to.contain('yahoo.com');
                });
                // REMARK: Speedup the tests without linking out
                //
                // settings.click().then(function() {
                //     browser.getCurrentUrl().then(function(url) {
                //         expect(url).to.contain('yahoo.com');
                //     });
                // });
            });
        });

        it('signout link contains "yahoo.com" and "logout=1"', function () {
            var profile = $(locators.Profile);
            var signout = $(locators.SignOut);

            browser.waitToBePresent(profile);
            browser.hover(profile).then (function () {
                browser.waitToBePresent(signout);
                signout.getAttribute('href').then(function(url) {
                    expect(url).to.contain('yahoo.com');
                    expect(url).to.contain('logout=1');
                });
                // REMARK: Speedup the tests without linking out
                //
                // signout.click().then(function() {
                //     browser.getCurrentUrl().then(function(url) {
                //         expect(url).to.contain('yahoo.com');
                //     });
                // });
            });
        });
    });
});
