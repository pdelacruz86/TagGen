/* global browser, $, it, describe, before, beforeEach, protractor */

var chai = require('chai');
var chaiAsPromised = require('chai-as-promised');
var conditions = require('../lib/conditions');
var expect = chai.expect;
var locators = require('../lib/locators');
var when = require('mocha-bdd-when');

chai.use(chaiAsPromised);

// A Protracterized httpGet() promise
function httpGet(siteUrl) {
    var http = require('http');
    var defer = protractor.promise.defer();

    http.get(siteUrl, function(response) {
        var bodyString = '';

        response.setEncoding('utf8');

        response.on('data', function(chunk) {
            bodyString += chunk;
        });

        response.on('end', function() {
            defer.fulfill({
                statusCode: response.statusCode,
                bodyString: bodyString
            });
        });
    }).on('error', function(e) {
        defer.reject('Got http.get error: ' + e.message);
    });

    return defer.promise;
}

describe('#check react', function () {
    before(function () {
        return browser.wait(function () {
            return browser.get('/console?ctrl=Header&m_id=tdv2-applet-uh&lang=en-US').then(function () {
                return true;
            });
        });
    });

    when(conditions['#base']).describe('#base', function () {
        beforeEach(function () {
            var app = $(locators.ReactApp);
            browser.waitToBePresent(app);
            expect(app.isPresent()).to.eventually.be.true;
        });

        it('should have no checksum warning in console', function () {
            var messages = [];
            var processMessage = function(message) {
                var data = null;

                if (message.match(/React attempted to reuse markup in a container but the checksum was invalid\./)) {
                    var matches = message.match(/^\s?\((?:client|server)\).*$/mig);

                    if (matches && matches.length === 2) {
                        data = {};
                        data.client = matches[0];
                        data.server = matches[1];
                    }
                }

                return data;
            };

            browser.driver.manage().logs().get('browser').then(function (entries) {
                entries.forEach(function (entry) {
                    if (entry.level.name === 'WARNING') {
                        var processedMessage = processMessage(entry.message);
                        if (processedMessage) {
                            messages.push(processedMessage);
                        }
                    }
                });

                expect(messages).to.be.deep.equals([]);
            });
        });

        it('should have data-react-checksum in the server', function () {
            browser.getCurrentUrl().then(function (url) {
                httpGet(url).then(function(result) {
                    expect(result.statusCode).to.be.equal(200);

                    var matches = result.bodyString.match(/data-react-checksum="(-?\d+)"/);
                    expect(matches).not.to.be.null;
                });
            });
        });

        it('should have data-react-checksum in the client', function () {
            var reactId = $(locators.ReactId);
            browser.waitToBePresent(reactId);
            expect(reactId.isPresent()).to.eventually.be.true;

            browser.driver.getPageSource().then(function (source) {
                var matches = source.match(/data-react-checksum="(-?\d+)"/);
                expect(matches).not.to.be.null;
            });
        });
    });
});
