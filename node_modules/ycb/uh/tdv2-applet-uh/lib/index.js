var lodash = {
    lang: require('lodash/lang')
};
var url = require('url');
var ObjectAssign = require('object-assign');

module.exports = {
    getStaticMethod: function(component, type, name) {
        var method = null;

        if (component && component[type]) {
            if (lodash.lang.isArray(name)) {
                // Get static method from array

                method = component[type];
                for (var i = 0; i < name.length; i++) {
                    if (!method[name[i]]) {
                        method = null;
                        break;
                    }
                    method = method[name[i]];
                }
            }
            else if (lodash.lang.isString(name)) {
                // Get static method from string

                if (component[type][name]) {
                    method = component[type][name];
                }
            }
        }

        return method;
    },

    lightWeightBackground: function(site, lang, region, theme) {
        if (site) {
            site = '.' + site;
        }
        else {
            site = '';
        }
        var val = '';

        if (theme === 'dark') {
            val = [
                '#atomic ' + site + '.' + region + '.' + lang + ' .Bgc\\(\\$bg-header\\)',
                '{background-color:#000\\9 !important;}',
                '#atomic ' + site + '.' + region + '.' + lang + ' .Bgc\\(\\$bg-header\\):hover',
                '#atomic ' + site + '.' + region + '.' + lang + ' .Bgc\\(\\$bg-header\\):hover b',
                '#atomic ' + site + '.' + region + '.' + lang + ' .Bgc\\(\\$bg-header\\) b:hover',
                '{background-color:#fff\\9 !important; color:#000\\9 !important;}'
            ].join(' ');
        }

        return val;
    },

    lightWeightLogo: function(id, template) {
        if (template === 'property') {
            return [
                '#atomic.ie-7 ' + id + ' {*display:inline; margin-left:49px!important; zoom:1;}',
                '#atomic.ie-8 ' + id + ' {position:relative;}'
            ].join(' ');
        }
        else {
            return '';
        }
    },

    mediaBackgroundImage: function(id, image1x, image2x) {
        return [
            id + ' {background-image: url(' + image1x + ');}',
            '@media',
                [
                    ' only screen and (-webkit-min-device-pixel-ratio: 2)',
                    ' only screen and ( min--moz-device-pixel-ratio: 2)',
                    ' only screen and ( -o-min-device-pixel-ratio: 2/1)',
                    ' only screen and ( min-device-pixel-ratio: 2)',
                    ' only screen and ( min-resolution: 192dpi)',
                    ' only screen and ( min-resolution: 2dppx)'
                ].join(','),
            '{ ' + id + ' {background-image: url(' + image2x + ');} }'
        ].join(' ');
    },

    isClient: function() {
        return (typeof window !== 'undefined');
    },

    /**
     * Parse the input value as a boolean.
     *
     * @method isEnabled
     * @param  {object}  val Input value
     * @return {boolean} Return TRUE if input is true, 1, 'true' or '1'.
     *                   Otherwise, FALSE is returned.
     */
    isEnabled: function(val) {
        return ['true', '1', true, 1].indexOf(val) > -1;
    },

    /**
     * Expand the input string with prefix and suffix.
     *
     * @method strExpand
     * @param  {object} s       Input string
     * @param  {object} prefix  Prepend string with prefix
     * @param  {object} suffix  Append string with suffix
     * @return {object} Return expanded string [prefix][s][suffix].
     */
    strExpand: function(s, prefix, suffix) {
        if (prefix) {
            s = prefix + s;
        }
        if (suffix) {
            s = s + suffix;
        }
        return s;
    },

    /**
     * Get logo url or intl yahoo url based on params passed
     * if site is not passed we get the intl yahoo home page url.
     * if site & intl are not passed we will fallback to us yahoo.com url
     *
     * @method getLogoUrl
     * @param  {string} intl        Intl
     * @param  {string} protocol    http or https
     * @param  {string} site        property name
     * @return {string} Return url
     */
    getLogoUrl: function(intl, protocol, site) {
        var logoUrl = null;
        protocol = protocol || 'https';
        var urlObj = {
            protocol: protocol,
            host: intl ? intl + '.yahoo.com' : 'www.yahoo.com'
        };

        if (intl === 'e1') {
            urlObj.host = 'espanol.yahoo.com';
        }
        else if (intl === 'us') {
            urlObj.host = 'www.yahoo.com';
        }

        if (site && site !== 'fp' && site !== 'all') {
            urlObj.pathname = site;
        }

        logoUrl = url.format(urlObj);

        return logoUrl;
    },

    /**
     * Get page url or default to https://www.yahoo.com 
     *
     * @method getPageUrl
     * @param  {object} navigate    navigate object from routestore.getCurrentNavigate()
     * @param  {string} host        session host
     * @param  {string} protocol    http or https
     * @return {string} Return url
     */
    getPageUrl: function(navigate, host, protocol) {
        var pageUrl = 'https://www.yahoo.com/';
        var sessionUrl = {
            protocol: protocol || 'https',
            host: host || 'www.yahoo.com'
        };
        if (navigate) {
            if (navigate.externalUrl) {
                // navigate.externalUrl returns an absolute link
                pageUrl = navigate.externalUrl;
            }
            else if (navigate.url) {
                // navigate.url returns a relative link
                var urlObj = url.parse(navigate.url, true);
                urlObj = ObjectAssign(urlObj, sessionUrl);
                pageUrl = url.format(urlObj);
            }
            else {
                pageUrl = url.format(sessionUrl);
            }
        }
        return pageUrl;
    }
};
