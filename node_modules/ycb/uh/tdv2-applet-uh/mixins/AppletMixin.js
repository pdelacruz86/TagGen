 'use strict';

var debug = require('debug')('uh:mixins:AppletMixin');
var Immutable = require('immutable');
var IntlMixin = require('react-intl');
var lodash = {
    lang: require('lodash/lang')
};
var lib = require('../lib/');
var React = require('react/addons');

module.exports = {

    contextTypes: {
        conf: React.PropTypes.object,
        logger: React.PropTypes.object,
        theme: React.PropTypes.object
    },

    mixins: [IntlMixin],

    getClassName: function(component, name) {
        var data = null;
        var method;

        // Get data based on the following order:
        //  1. Config
        //  2. Static
        //  3. Theme

        // Config
        data = this.getConf(component, name);

        // Static
        if (!data || (Immutable.Map.isMap(data) && data.isEmpty())) {
            method = lib.getStaticMethod(component, 'className', name);
            data = (method && this[method] && this[method].call(this, name));
        }

        // Theme
        if (!data) {
            data = this.getTheme(component, name);
        }

        data = Immutable.Map.isMap(data) ? data.toJS() : data;

        debug(component.displayName, 'getClassName', name, data);
        return data;
    },

    getConf: function(component, name) {
        var conf;
        var data = null;
        var method;

        // Get data based on the following order:
        //  1. Config
        //  2. Static

        // Config
        if (component.base) {
            conf = this.context.conf.getIn(component.base);
        }
        else {
            conf = this.context.conf;
        }

        if (conf) {
            if (lodash.lang.isArray(name)) {
                data = conf.getIn(name);
            }
            else if (lodash.lang.isString(name)) {
                data = conf.get(name);
            }
        }

        // Static
        if (!data) {
            method = lib.getStaticMethod(component, 'conf', name);
            if (method && this[method]) {
                data = this[method].call(this);
            }
        }

        debug(component.displayName, 'getConf', name, data);
        return data;
    },

    getMetaData: function(component, name) {
        var data = null;
        var method;
        var propsData;

        // Get data based on the following order:
        //  1. Props (props.data)
        //  2. Static

        // Props
        if (this.props && this.props.data) {
            propsData = this.props.data;

            if (!Immutable.Map.isMap(propsData)) {
                if (this.context && this.context.logger) {
                    this.context.logger.warn('The this.props.data is not an Immutable object. name=', name);
                }
                propsData = Immutable.fromJS(this.props.data);
            }

            if (lodash.lang.isArray(name)) {
                data = propsData.getIn(name);
            }
            else if (lodash.lang.isString(name)) {
                data = propsData.get(name);
            }
        }

        // Static
        if (!data) {
            method = lib.getStaticMethod(component, 'metaData', name);
            if (method && this[method]) {
                data = this[method].call(this);
            }
        }

        debug(component.displayName, 'getMetaData', name, data);
        return data;
    },

    getNode: function(component, name) {
        var data = null;
        var method;

        // Get data based on the following order:
        //  1. Static

        // Static
        if (!data) {
            method = lib.getStaticMethod(component, 'node', name);
            if (method && this[method]) {
                data = this[method].call(this);
            }
        }

        debug(component.displayName, 'getNode', name, data);
        return data;
    },

    getI13n: function(component, name, source) {
        var data = component.i13n.get(name, Immutable.fromJS({}));

        if (source) {
            source = Immutable.fromJS(source);
            data = data.merge(source);
        }

        data = data.toJS();
        debug(component.displayName, 'getI13n', name, data, source);
        return data;
    },

    getIntl: function(name) {
        var data;
        try {
            data = this.getIntlMessage(name);
            debug('getIntl', name, data);
        }
        catch (e) {
            if (this.context && this.context.logger) {
                this.context.logger.warn('The paramter "name" is not defined in getIntl method. name=', name, e);
            }
        }

        return data;
    },

    getTheme: function(component, name) {
        var data = null;
        var theme = null;

        if (this.context && this.context.theme && component.base) {
            theme = this.context.theme.getIn(component.base);
        }
        else if (this.context) {
            theme = this.context.theme;
        }

        if (theme) {
            if (lodash.lang.isArray(name)) {
                data = theme.getIn(name);
            }
            else if (lodash.lang.isString(name)) {
                data = theme.get(name);
            }
        }

        debug(component.displayName, 'getTheme', name, data);
        return data;
    }
};
