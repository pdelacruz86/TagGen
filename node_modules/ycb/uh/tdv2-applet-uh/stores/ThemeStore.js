/**
 * @class ThemeStore
 */

'use strict';

var createStore = require('fluxible-immutable-utils').createImmutableStore;
var commonDimensions = require('common-dimensions');
var debug = require('debug')('uh:stores:ThemeStore');
var Immutable = require('immutable');

var ThemeStore = createStore({

    storeName: 'ThemeStore',

    handlers: {
        THEME_FAILURE: '_handleThemeFailure',
        THEME_SUCCESS: '_handleThemeSuccess'
    },

    commonDimensionsMap: Immutable.Map(),

    _handleThemeFailure: function(error) {
        debug('_handleThemeFailure', 'error', error);

        error = error || {};

        this.setState(this._state.withMutations(function updateState(state) {
            state.set('error', Immutable.fromJS(error));
        }));
    },

    _handleThemeSuccess: function(payload) {
        debug('_handleThemeSuccess', 'payload', payload);

        var data = payload.data || {};
        var cacheKey = this.getCacheKey(payload.params);

        debug('_handleThemeSuccess', 'cache_key', cacheKey);

        this.setState(this._state.withMutations(function updateState(state) {
            state.setIn(['data', cacheKey], Immutable.fromJS(data));
        }));
    },

    getCacheKey: function(params) {
        var key = this.getCommonDimensions();
        key = key.merge(params);

        debug('cache_key', key, key.hashCode());

        // Convert key to a string
        return key.hashCode() + '';
    },

    getCommonDimensions: function() {
        var dimensions = this.getContext().session.dimensions;
        var keys = Immutable.Map();

        // Compute the dimension map only if session cache is empty.
        if (this.commonDimensionsMap.size === 0) {
            commonDimensions[0].dimensions.forEach(
                function processCommonDimension(dimension) {
                    this.commonDimensionsMap = this.commonDimensionsMap.set(Object.keys(dimension)[0], 1);
                }.bind(this)
            );
        }

        // Extract the session dimensions based on common dimensions.
        Object.keys(dimensions).forEach(
            function processSessionDimension(name) {
                if (this.commonDimensionsMap.has(name)) {
                    keys = keys.set(name, dimensions[name]);
                }
            }.bind(this)
        );

        return keys;
    },

    getError: function() {
        return this._state.getIn(['error']) || Immutable.Map();
    },

    getData: function() {
        return this._state.getIn(['data']) || Immutable.Map();
    },

    getCachedData: function(params) {
        var cacheKey = this.getCacheKey(params);

        debug('getCachedData', 'data', this.getData());
        debug('getCachedData', 'cache_key', cacheKey);

        return this._state.getIn(['data', cacheKey]) || Immutable.Map();
    },

    getState: function() {
        return this._state;
    }
});

module.exports = ThemeStore;
