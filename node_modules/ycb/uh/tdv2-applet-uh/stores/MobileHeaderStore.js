/**
 * @class MobileHeaderStore
 */

'use strict';

var createStore = require('fluxible-immutable-utils').createImmutableStore;
var Immutable = require('immutable');

var MobileHeaderStore = createStore({

    storeName: 'MobileHeaderStore',

    statics: {
        handlers: {
            GET_STORY_LINES_COUNT_SUCCESS: 'setStoryLinesCount',
            NAVIGATE_SUCCESS: 'setHeaderTitle', // check flux-router-component docs
            NAVRAIL_HIDE: 'setStoryLinesCount', // check flux-router-component docs
            SET_NAVTRIGGER: 'setNavTrigger'
        }
    },

    /**
     * Get instance data and config
     * @param {String} instanceId
     * @return {Immutable.Map} Instance data and config
     */
    getInstance: function (instanceId) {
        return this._state.get(instanceId) || Immutable.fromJS({data: {}});
    },

    /**
     * Delete a instance's store data by instanceId.
     * WARNING: Should only be called from componentWillUnmount
     */
    removeInstance: function (instanceId) {
        this.setState(this._state.remove(instanceId));
    },

    /**
     * Used to set the page topic navTitle. this value is set,
     * when user clicks on entities/topics or nav
     * @param {String} payload requested by page
     */
    setHeaderTitle: function (payload) {
        var navTitle;
        var useNavTitle;
        var name = payload.get('name') || '';
        var params = payload.get('params') || Immutable.fromJS({});
        var contentSite = payload.getIn(['params', 'contentSite']) || payload.get('contentSite') || 'home';
        var alias = params.get('alias') || '';
        if (name === 'topic' || name === 'category') {
            navTitle = decodeURIComponent(alias).split('-');
            // get navTitle from alias
            if (navTitle && navTitle.constructor === Array) {
                navTitle = navTitle[0];
            }
            if (navTitle.indexOf('_') > -1) {
                navTitle = navTitle.replace(/_/g,' ');
            }
            useNavTitle = true;
        } else {
            if (contentSite) {
                navTitle = contentSite;
            } else {
                navTitle = name;
            }
            useNavTitle = false;
        }
        if (navTitle) {
            this.setState(this._state.withMutations(function (state) {
                state.set('navTitle', navTitle);
                state.set('useNavTitle', useNavTitle);
            }));
        }
    },

    /**
     * Sets the NavTrigger state
     */
    setNavTrigger: function (payload) {
        if (payload) {
            this.setState(this._state.set('navTrigger', payload));
        }
    },

    /**
     * Returns the topic Title
     */
    getHeaderTitle: function () {
        return this._state.get('navTitle');
    },

    /**
     * returns flag, based on which we show topic header or main header
     */
    getHeaderFlag: function () {
        return this._state.get('useNavTitle');
    },

    /**
     * returns the NavTrigger state
     */
    getNavTrigger: function () {
        return this._state.get('navTrigger');
    },

    /**
     * Populates store with users storyLines count
     * @method setStoryLinesCount
     * @param {Object} payload The users story lines count
     */
    setStoryLinesCount: function (payload) {
        if (payload && payload.data) {
            this.setState(this._state.set('storyLinesCount', Immutable.fromJS(payload.data)));
        } else {
            this.setState(this._state.set('storyLinesCount', 0));
        }
    },

    /**
     * Returns story lines count
     * @method getStoryLinesCount
     * @return [Object] return story lines count
     */
    getStoryLinesCount: function () {
        return this._state.get('storyLinesCount');
    }
});

module.exports = MobileHeaderStore;
